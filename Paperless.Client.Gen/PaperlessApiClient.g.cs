//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8600 // Disable "CS8600 Converting null literal or possible null value to non-nullable type"
#pragma warning disable 8602 // Disable "CS8602 Dereference of a possibly null reference"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace Paperless.Client.Gen
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaperlessApiClient 
    {
        #pragma warning disable 8618
        private string _baseUrl;
        #pragma warning restore 8618

        private System.Net.Http.HttpClient _httpClient;
        private static System.Lazy<System.Text.Json.JsonSerializerOptions> _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings, true);
        private System.Text.Json.JsonSerializerOptions _instanceSettings;

    #pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        public PaperlessApiClient(string baseUrl, System.Net.Http.HttpClient httpClient)
    #pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
        {
            BaseUrl = baseUrl;
            _httpClient = httpClient;
            Initialize();
        }

        private static System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set
            {
                _baseUrl = value;
                if (!string.IsNullOrEmpty(_baseUrl) && !_baseUrl.EndsWith("/"))
                    _baseUrl += '/';
            }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _instanceSettings ?? _settings.Value; } }

        static partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void Initialize();

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Perform a bulk edit operation on a list of objects
        /// </remarks>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BulkEditResult> ApiBulkEditObjectsAsync(BulkEditObjectsRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/bulk_edit_objects/"
                    urlBuilder_.Append("api/bulk_edit_objects/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BulkEditResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Get the application configuration
        /// </remarks>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ApplicationConfiguration>> ApiConfigGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/config/"
                    urlBuilder_.Append("api/config/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<ApplicationConfiguration>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Paperless-ngx-Anwendungseinstellungen identifiziert.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApplicationConfiguration> ApiConfigGetAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/config/{id}/"
                    urlBuilder_.Append("api/config/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApplicationConfiguration>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Paperless-ngx-Anwendungseinstellungen identifiziert.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApplicationConfiguration> ApiConfigPutAsync(int id, ApplicationConfigurationRequest body, object? user_args = null, object? barcode_tag_mapping = null, OutputTypeEnum? output_type = null, int? pages = null, string? language = null, ModeEnum? mode = null, SkipArchiveFileEnum? skip_archive_file = null, int? image_dpi = null, UnpaperCleanEnum? unpaper_clean = null, bool? deskew = null, bool? rotate_pages = null, double? rotate_pages_threshold = null, double? max_image_pixels = null, ColorConversionStrategyEnum? color_conversion_strategy = null, string? app_title = null, FileParameter app_logo = null, bool? barcodes_enabled = null, bool? barcode_enable_tiff_support = null, string? barcode_string = null, bool? barcode_retain_split_pages = null, bool? barcode_enable_asn = null, string? barcode_asn_prefix = null, double? barcode_upscale = null, int? barcode_dpi = null, int? barcode_max_pages = null, bool? barcode_enable_tag = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/config/{id}/"
                    urlBuilder_.Append("api/config/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApplicationConfiguration>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Paperless-ngx-Anwendungseinstellungen identifiziert.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ApplicationConfiguration> ApiConfigPatchAsync(int id, PatchedApplicationConfigurationRequest? body = null, object? user_args = null, object? barcode_tag_mapping = null, OutputTypeEnum? output_type = null, int? pages = null, string? language = null, ModeEnum? mode = null, SkipArchiveFileEnum? skip_archive_file = null, int? image_dpi = null, UnpaperCleanEnum? unpaper_clean = null, bool? deskew = null, bool? rotate_pages = null, double? rotate_pages_threshold = null, double? max_image_pixels = null, ColorConversionStrategyEnum? color_conversion_strategy = null, string? app_title = null, FileParameter app_logo = null, bool? barcodes_enabled = null, bool? barcode_enable_tiff_support = null, string? barcode_string = null, bool? barcode_retain_split_pages = null, bool? barcode_enable_asn = null, string? barcode_asn_prefix = null, double? barcode_upscale = null, int? barcode_dpi = null, int? barcode_max_pages = null, bool? barcode_enable_tag = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/config/{id}/"
                    urlBuilder_.Append("api/config/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ApplicationConfiguration>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Paperless-ngx-Anwendungseinstellungen identifiziert.</param>
        /// <returns>No response body</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ApiConfigDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/config/{id}/"
                    urlBuilder_.Append("api/config/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id__in">Mehrere Werte können durch Kommas getrennt sein.</param>
        /// <param name="ordering">Feld, das zum Sortieren der Ergebnisse verwendet werden soll.</param>
        /// <param name="page">Eine Seitenzahl in der paginierten Ergebnismenge.</param>
        /// <param name="page_size">Anzahl der pro Seite zurückzugebenden Ergebnisse.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PaginatedCorrespondentList> ApiCorrespondentsGetAsync(bool? full_perms = null, int? id = null, System.Collections.Generic.IEnumerable<int>? id__in = null, string? name__icontains = null, string? name__iendswith = null, string? name__iexact = null, string? name__istartswith = null, string? ordering = null, int? page = null, int? page_size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/correspondents/"
                    urlBuilder_.Append("api/correspondents/");
                    urlBuilder_.Append('?');
                    if (full_perms != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("full_perms")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(full_perms, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id__in != null)
                    {
                        bool isAfterFirst = false;
                        foreach (var item_ in id__in)
                        {
                            if (!isAfterFirst)
                            {
                                urlBuilder_.Append(System.Uri.EscapeDataString("id__in")).Append('=');
                            }
                            urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append(',');
                            isAfterFirst = true;
                        }
                        if (isAfterFirst)
                        {
                            urlBuilder_.Length--;
                            urlBuilder_.Append('&');
                        }
                    }
                    if (name__icontains != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name__icontains")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name__icontains, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name__iendswith != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name__iendswith")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name__iendswith, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name__iexact != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name__iexact")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name__iexact, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name__istartswith != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name__istartswith")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name__istartswith, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (ordering != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("ordering")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ordering, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page_size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PaginatedCorrespondentList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Correspondent> ApiCorrespondentsPostAsync(CorrespondentRequest body, string? name = null, string? match = null, MatchingAlgorithm? matching_algorithm = null, bool? is_insensitive = null, int? owner = null, Set_permissions? set_permissions = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/correspondents/"
                    urlBuilder_.Append("api/correspondents/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Correspondent>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Korrespondent identifiziert.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Correspondent> ApiCorrespondentsGetAsync(int id, bool? full_perms = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/correspondents/{id}/"
                    urlBuilder_.Append("api/correspondents/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append('?');
                    if (full_perms != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("full_perms")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(full_perms, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Correspondent>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Korrespondent identifiziert.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Correspondent> ApiCorrespondentsPutAsync(int id, CorrespondentRequest body, string? name = null, string? match = null, MatchingAlgorithm? matching_algorithm = null, bool? is_insensitive = null, int? owner = null, Set_permissions? set_permissions = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/correspondents/{id}/"
                    urlBuilder_.Append("api/correspondents/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Correspondent>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Korrespondent identifiziert.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Correspondent> ApiCorrespondentsPatchAsync(int id, PatchedCorrespondentRequest? body = null, string? name = null, string? match = null, MatchingAlgorithm? matching_algorithm = null, bool? is_insensitive = null, int? owner = null, Set_permissions2? set_permissions = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/correspondents/{id}/"
                    urlBuilder_.Append("api/correspondents/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Correspondent>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Korrespondent identifiziert.</param>
        /// <returns>No response body</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ApiCorrespondentsDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/correspondents/{id}/"
                    urlBuilder_.Append("api/correspondents/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id__in">Mehrere Werte können durch Kommas getrennt sein.</param>
        /// <param name="ordering">Feld, das zum Sortieren der Ergebnisse verwendet werden soll.</param>
        /// <param name="page">Eine Seitenzahl in der paginierten Ergebnismenge.</param>
        /// <param name="page_size">Anzahl der pro Seite zurückzugebenden Ergebnisse.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PaginatedCustomFieldList> ApiCustomFieldsGetAsync(int? id = null, System.Collections.Generic.IEnumerable<int>? id__in = null, string? name__icontains = null, string? name__iendswith = null, string? name__iexact = null, string? name__istartswith = null, string? ordering = null, int? page = null, int? page_size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/custom_fields/"
                    urlBuilder_.Append("api/custom_fields/");
                    urlBuilder_.Append('?');
                    if (id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id__in != null)
                    {
                        bool isAfterFirst = false;
                        foreach (var item_ in id__in)
                        {
                            if (!isAfterFirst)
                            {
                                urlBuilder_.Append(System.Uri.EscapeDataString("id__in")).Append('=');
                            }
                            urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append(',');
                            isAfterFirst = true;
                        }
                        if (isAfterFirst)
                        {
                            urlBuilder_.Length--;
                            urlBuilder_.Append('&');
                        }
                    }
                    if (name__icontains != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name__icontains")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name__icontains, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name__iendswith != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name__iendswith")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name__iendswith, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name__iexact != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name__iexact")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name__iexact, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name__istartswith != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name__istartswith")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name__istartswith, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (ordering != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("ordering")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ordering, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page_size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PaginatedCustomFieldList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="extra_data">Zusätzliche Daten für das benutzerdefinierte Feld, z. B. Auswahloptionen</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CustomField> ApiCustomFieldsPostAsync(CustomFieldRequest body, string? name = null, DataTypeEnum? data_type = null, object? extra_data = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/custom_fields/"
                    urlBuilder_.Append("api/custom_fields/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomField>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Benutzerdefiniertes Feld identifiziert.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CustomField> ApiCustomFieldsGetAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/custom_fields/{id}/"
                    urlBuilder_.Append("api/custom_fields/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomField>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Benutzerdefiniertes Feld identifiziert.</param>
        /// <param name="extra_data">Zusätzliche Daten für das benutzerdefinierte Feld, z. B. Auswahloptionen</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CustomField> ApiCustomFieldsPutAsync(int id, CustomFieldRequest body, string? name = null, DataTypeEnum? data_type = null, object? extra_data = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/custom_fields/{id}/"
                    urlBuilder_.Append("api/custom_fields/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomField>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Benutzerdefiniertes Feld identifiziert.</param>
        /// <param name="extra_data">Zusätzliche Daten für das benutzerdefinierte Feld, z. B. Auswahloptionen</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CustomField> ApiCustomFieldsPatchAsync(int id, PatchedCustomFieldRequest? body = null, string? name = null, DataTypeEnum? data_type = null, object? extra_data = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/custom_fields/{id}/"
                    urlBuilder_.Append("api/custom_fields/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomField>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Benutzerdefiniertes Feld identifiziert.</param>
        /// <returns>No response body</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ApiCustomFieldsDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/custom_fields/{id}/"
                    urlBuilder_.Append("api/custom_fields/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id__in">Mehrere Werte können durch Kommas getrennt sein.</param>
        /// <param name="ordering">Feld, das zum Sortieren der Ergebnisse verwendet werden soll.</param>
        /// <param name="page">Eine Seitenzahl in der paginierten Ergebnismenge.</param>
        /// <param name="page_size">Anzahl der pro Seite zurückzugebenden Ergebnisse.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PaginatedDocumentTypeList> ApiDocumentTypesGetAsync(bool? full_perms = null, int? id = null, System.Collections.Generic.IEnumerable<int>? id__in = null, string? name__icontains = null, string? name__iendswith = null, string? name__iexact = null, string? name__istartswith = null, string? ordering = null, int? page = null, int? page_size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/document_types/"
                    urlBuilder_.Append("api/document_types/");
                    urlBuilder_.Append('?');
                    if (full_perms != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("full_perms")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(full_perms, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id__in != null)
                    {
                        bool isAfterFirst = false;
                        foreach (var item_ in id__in)
                        {
                            if (!isAfterFirst)
                            {
                                urlBuilder_.Append(System.Uri.EscapeDataString("id__in")).Append('=');
                            }
                            urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append(',');
                            isAfterFirst = true;
                        }
                        if (isAfterFirst)
                        {
                            urlBuilder_.Length--;
                            urlBuilder_.Append('&');
                        }
                    }
                    if (name__icontains != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name__icontains")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name__icontains, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name__iendswith != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name__iendswith")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name__iendswith, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name__iexact != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name__iexact")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name__iexact, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name__istartswith != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name__istartswith")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name__istartswith, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (ordering != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("ordering")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ordering, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page_size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PaginatedDocumentTypeList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DocumentType> ApiDocumentTypesPostAsync(DocumentTypeRequest body, string? name = null, string? match = null, MatchingAlgorithm? matching_algorithm = null, bool? is_insensitive = null, int? owner = null, Set_permissions3? set_permissions = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/document_types/"
                    urlBuilder_.Append("api/document_types/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DocumentType>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Dokumenttyp identifiziert.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DocumentType> ApiDocumentTypesGetAsync(int id, bool? full_perms = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/document_types/{id}/"
                    urlBuilder_.Append("api/document_types/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append('?');
                    if (full_perms != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("full_perms")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(full_perms, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DocumentType>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Dokumenttyp identifiziert.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DocumentType> ApiDocumentTypesPutAsync(int id, DocumentTypeRequest body, string? name = null, string? match = null, MatchingAlgorithm? matching_algorithm = null, bool? is_insensitive = null, int? owner = null, Set_permissions3? set_permissions = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/document_types/{id}/"
                    urlBuilder_.Append("api/document_types/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DocumentType>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Dokumenttyp identifiziert.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<DocumentType> ApiDocumentTypesPatchAsync(int id, PatchedDocumentTypeRequest? body = null, string? name = null, string? match = null, MatchingAlgorithm? matching_algorithm = null, bool? is_insensitive = null, int? owner = null, Set_permissions4? set_permissions = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/document_types/{id}/"
                    urlBuilder_.Append("api/document_types/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<DocumentType>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Dokumenttyp identifiziert.</param>
        /// <returns>No response body</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ApiDocumentTypesDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/document_types/{id}/"
                    urlBuilder_.Append("api/document_types/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Document views including search
        /// </remarks>
        /// <param name="correspondent__id__in">Mehrere Werte können durch Kommas getrennt sein.</param>
        /// <param name="document_type__id__in">Mehrere Werte können durch Kommas getrennt sein.</param>
        /// <param name="has_custom_fields">Has custom field</param>
        /// <param name="id__in">Mehrere Werte können durch Kommas getrennt sein.</param>
        /// <param name="is_tagged">Is tagged</param>
        /// <param name="ordering">Feld, das zum Sortieren der Ergebnisse verwendet werden soll.</param>
        /// <param name="owner__id__in">Mehrere Werte können durch Kommas getrennt sein.</param>
        /// <param name="page">Eine Seitenzahl in der paginierten Ergebnismenge.</param>
        /// <param name="page_size">Anzahl der pro Seite zurückzugebenden Ergebnisse.</param>
        /// <param name="query">Advanced search query string</param>
        /// <param name="search">Ein Suchbegriff.</param>
        /// <param name="storage_path__id__in">Mehrere Werte können durch Kommas getrennt sein.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PaginatedDocumentList> ApiDocumentsGetAsync(System.DateTimeOffset? added__date__gt = null, System.DateTimeOffset? added__date__gte = null, System.DateTimeOffset? added__date__lt = null, System.DateTimeOffset? added__date__lte = null, double? added__day = null, System.DateTimeOffset? added__gt = null, System.DateTimeOffset? added__gte = null, System.DateTimeOffset? added__lt = null, System.DateTimeOffset? added__lte = null, double? added__month = null, double? added__year = null, int? archive_serial_number = null, int? archive_serial_number__gt = null, int? archive_serial_number__gte = null, bool? archive_serial_number__isnull = null, int? archive_serial_number__lt = null, int? archive_serial_number__lte = null, string? checksum__icontains = null, string? checksum__iendswith = null, string? checksum__iexact = null, string? checksum__istartswith = null, string? content__icontains = null, string? content__iendswith = null, string? content__iexact = null, string? content__istartswith = null, int? correspondent__id = null, System.Collections.Generic.IEnumerable<int>? correspondent__id__in = null, int? correspondent__id__none = null, bool? correspondent__isnull = null, string? correspondent__name__icontains = null, string? correspondent__name__iendswith = null, string? correspondent__name__iexact = null, string? correspondent__name__istartswith = null, System.DateTimeOffset? created__date__gt = null, System.DateTimeOffset? created__date__gte = null, System.DateTimeOffset? created__date__lt = null, System.DateTimeOffset? created__date__lte = null, double? created__day = null, System.DateTimeOffset? created__gt = null, System.DateTimeOffset? created__gte = null, System.DateTimeOffset? created__lt = null, System.DateTimeOffset? created__lte = null, double? created__month = null, double? created__year = null, string? custom_field_query = null, string? custom_fields__icontains = null, int? custom_fields__id__all = null, int? custom_fields__id__in = null, int? custom_fields__id__none = null, int? document_type__id = null, System.Collections.Generic.IEnumerable<int>? document_type__id__in = null, int? document_type__id__none = null, bool? document_type__isnull = null, string? document_type__name__icontains = null, string? document_type__name__iendswith = null, string? document_type__name__iexact = null, string? document_type__name__istartswith = null, System.Collections.Generic.IEnumerable<string>? fields = null, bool? full_perms = null, bool? has_custom_fields = null, int? id = null, System.Collections.Generic.IEnumerable<int>? id__in = null, bool? is_in_inbox = null, bool? is_tagged = null, string? mime_type = null, System.DateTimeOffset? modified__date__gt = null, System.DateTimeOffset? modified__date__gte = null, System.DateTimeOffset? modified__date__lt = null, System.DateTimeOffset? modified__date__lte = null, double? modified__day = null, System.DateTimeOffset? modified__gt = null, System.DateTimeOffset? modified__gte = null, System.DateTimeOffset? modified__lt = null, System.DateTimeOffset? modified__lte = null, double? modified__month = null, double? modified__year = null, string? ordering = null, string? original_filename__icontains = null, string? original_filename__iendswith = null, string? original_filename__iexact = null, string? original_filename__istartswith = null, int? owner__id = null, System.Collections.Generic.IEnumerable<int>? owner__id__in = null, int? owner__id__none = null, bool? owner__isnull = null, int? page = null, int? page_size = null, string? query = null, string? search = null, bool? shared_by__id = null, int? storage_path__id = null, System.Collections.Generic.IEnumerable<int>? storage_path__id__in = null, int? storage_path__id__none = null, bool? storage_path__isnull = null, string? storage_path__name__icontains = null, string? storage_path__name__iendswith = null, string? storage_path__name__iexact = null, string? storage_path__name__istartswith = null, int? tags__id = null, int? tags__id__all = null, int? tags__id__in = null, int? tags__id__none = null, string? tags__name__icontains = null, string? tags__name__iendswith = null, string? tags__name__iexact = null, string? tags__name__istartswith = null, string? title__icontains = null, string? title__iendswith = null, string? title__iexact = null, string? title__istartswith = null, string? title_content = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/documents/"
                    urlBuilder_.Append("api/documents/");
                    urlBuilder_.Append('?');
                    if (added__date__gt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("added__date__gt")).Append('=').Append(System.Uri.EscapeDataString(added__date__gt.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (added__date__gte != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("added__date__gte")).Append('=').Append(System.Uri.EscapeDataString(added__date__gte.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (added__date__lt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("added__date__lt")).Append('=').Append(System.Uri.EscapeDataString(added__date__lt.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (added__date__lte != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("added__date__lte")).Append('=').Append(System.Uri.EscapeDataString(added__date__lte.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (added__day != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("added__day")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(added__day, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (added__gt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("added__gt")).Append('=').Append(System.Uri.EscapeDataString(added__gt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (added__gte != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("added__gte")).Append('=').Append(System.Uri.EscapeDataString(added__gte.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (added__lt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("added__lt")).Append('=').Append(System.Uri.EscapeDataString(added__lt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (added__lte != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("added__lte")).Append('=').Append(System.Uri.EscapeDataString(added__lte.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (added__month != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("added__month")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(added__month, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (added__year != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("added__year")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(added__year, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (archive_serial_number != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("archive_serial_number")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(archive_serial_number, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (archive_serial_number__gt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("archive_serial_number__gt")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(archive_serial_number__gt, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (archive_serial_number__gte != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("archive_serial_number__gte")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(archive_serial_number__gte, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (archive_serial_number__isnull != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("archive_serial_number__isnull")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(archive_serial_number__isnull, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (archive_serial_number__lt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("archive_serial_number__lt")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(archive_serial_number__lt, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (archive_serial_number__lte != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("archive_serial_number__lte")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(archive_serial_number__lte, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (checksum__icontains != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("checksum__icontains")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(checksum__icontains, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (checksum__iendswith != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("checksum__iendswith")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(checksum__iendswith, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (checksum__iexact != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("checksum__iexact")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(checksum__iexact, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (checksum__istartswith != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("checksum__istartswith")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(checksum__istartswith, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (content__icontains != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("content__icontains")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(content__icontains, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (content__iendswith != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("content__iendswith")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(content__iendswith, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (content__iexact != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("content__iexact")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(content__iexact, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (content__istartswith != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("content__istartswith")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(content__istartswith, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (correspondent__id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("correspondent__id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(correspondent__id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (correspondent__id__in != null)
                    {
                        bool isAfterFirst = false;
                        foreach (var item_ in correspondent__id__in)
                        {
                            if (!isAfterFirst)
                            {
                                urlBuilder_.Append(System.Uri.EscapeDataString("correspondent__id__in")).Append('=');
                            }
                            urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append(',');
                            isAfterFirst = true;
                        }
                        if (isAfterFirst)
                        {
                            urlBuilder_.Length--;
                            urlBuilder_.Append('&');
                        }
                    }
                    if (correspondent__id__none != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("correspondent__id__none")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(correspondent__id__none, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (correspondent__isnull != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("correspondent__isnull")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(correspondent__isnull, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (correspondent__name__icontains != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("correspondent__name__icontains")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(correspondent__name__icontains, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (correspondent__name__iendswith != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("correspondent__name__iendswith")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(correspondent__name__iendswith, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (correspondent__name__iexact != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("correspondent__name__iexact")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(correspondent__name__iexact, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (correspondent__name__istartswith != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("correspondent__name__istartswith")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(correspondent__name__istartswith, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (created__date__gt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("created__date__gt")).Append('=').Append(System.Uri.EscapeDataString(created__date__gt.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (created__date__gte != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("created__date__gte")).Append('=').Append(System.Uri.EscapeDataString(created__date__gte.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (created__date__lt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("created__date__lt")).Append('=').Append(System.Uri.EscapeDataString(created__date__lt.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (created__date__lte != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("created__date__lte")).Append('=').Append(System.Uri.EscapeDataString(created__date__lte.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (created__day != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("created__day")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(created__day, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (created__gt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("created__gt")).Append('=').Append(System.Uri.EscapeDataString(created__gt.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (created__gte != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("created__gte")).Append('=').Append(System.Uri.EscapeDataString(created__gte.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (created__lt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("created__lt")).Append('=').Append(System.Uri.EscapeDataString(created__lt.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (created__lte != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("created__lte")).Append('=').Append(System.Uri.EscapeDataString(created__lte.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (created__month != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("created__month")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(created__month, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (created__year != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("created__year")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(created__year, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (custom_field_query != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("custom_field_query")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(custom_field_query, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (custom_fields__icontains != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("custom_fields__icontains")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(custom_fields__icontains, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (custom_fields__id__all != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("custom_fields__id__all")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(custom_fields__id__all, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (custom_fields__id__in != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("custom_fields__id__in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(custom_fields__id__in, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (custom_fields__id__none != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("custom_fields__id__none")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(custom_fields__id__none, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (document_type__id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("document_type__id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(document_type__id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (document_type__id__in != null)
                    {
                        bool isAfterFirst = false;
                        foreach (var item_ in document_type__id__in)
                        {
                            if (!isAfterFirst)
                            {
                                urlBuilder_.Append(System.Uri.EscapeDataString("document_type__id__in")).Append('=');
                            }
                            urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append(',');
                            isAfterFirst = true;
                        }
                        if (isAfterFirst)
                        {
                            urlBuilder_.Length--;
                            urlBuilder_.Append('&');
                        }
                    }
                    if (document_type__id__none != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("document_type__id__none")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(document_type__id__none, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (document_type__isnull != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("document_type__isnull")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(document_type__isnull, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (document_type__name__icontains != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("document_type__name__icontains")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(document_type__name__icontains, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (document_type__name__iendswith != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("document_type__name__iendswith")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(document_type__name__iendswith, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (document_type__name__iexact != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("document_type__name__iexact")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(document_type__name__iexact, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (document_type__name__istartswith != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("document_type__name__istartswith")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(document_type__name__istartswith, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (fields != null)
                    {
                            foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (full_perms != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("full_perms")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(full_perms, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (has_custom_fields != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("has_custom_fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(has_custom_fields, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id__in != null)
                    {
                        bool isAfterFirst = false;
                        foreach (var item_ in id__in)
                        {
                            if (!isAfterFirst)
                            {
                                urlBuilder_.Append(System.Uri.EscapeDataString("id__in")).Append('=');
                            }
                            urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append(',');
                            isAfterFirst = true;
                        }
                        if (isAfterFirst)
                        {
                            urlBuilder_.Length--;
                            urlBuilder_.Append('&');
                        }
                    }
                    if (is_in_inbox != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("is_in_inbox")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(is_in_inbox, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (is_tagged != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("is_tagged")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(is_tagged, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (mime_type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("mime_type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(mime_type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (modified__date__gt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("modified__date__gt")).Append('=').Append(System.Uri.EscapeDataString(modified__date__gt.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (modified__date__gte != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("modified__date__gte")).Append('=').Append(System.Uri.EscapeDataString(modified__date__gte.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (modified__date__lt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("modified__date__lt")).Append('=').Append(System.Uri.EscapeDataString(modified__date__lt.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (modified__date__lte != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("modified__date__lte")).Append('=').Append(System.Uri.EscapeDataString(modified__date__lte.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (modified__day != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("modified__day")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(modified__day, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (modified__gt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("modified__gt")).Append('=').Append(System.Uri.EscapeDataString(modified__gt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (modified__gte != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("modified__gte")).Append('=').Append(System.Uri.EscapeDataString(modified__gte.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (modified__lt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("modified__lt")).Append('=').Append(System.Uri.EscapeDataString(modified__lt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (modified__lte != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("modified__lte")).Append('=').Append(System.Uri.EscapeDataString(modified__lte.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (modified__month != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("modified__month")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(modified__month, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (modified__year != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("modified__year")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(modified__year, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (ordering != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("ordering")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ordering, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (original_filename__icontains != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("original_filename__icontains")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(original_filename__icontains, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (original_filename__iendswith != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("original_filename__iendswith")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(original_filename__iendswith, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (original_filename__iexact != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("original_filename__iexact")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(original_filename__iexact, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (original_filename__istartswith != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("original_filename__istartswith")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(original_filename__istartswith, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (owner__id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("owner__id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(owner__id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (owner__id__in != null)
                    {
                        bool isAfterFirst = false;
                        foreach (var item_ in owner__id__in)
                        {
                            if (!isAfterFirst)
                            {
                                urlBuilder_.Append(System.Uri.EscapeDataString("owner__id__in")).Append('=');
                            }
                            urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append(',');
                            isAfterFirst = true;
                        }
                        if (isAfterFirst)
                        {
                            urlBuilder_.Length--;
                            urlBuilder_.Append('&');
                        }
                    }
                    if (owner__id__none != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("owner__id__none")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(owner__id__none, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (owner__isnull != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("owner__isnull")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(owner__isnull, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page_size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (query != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("query")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(query, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (search != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("search")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(search, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (shared_by__id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("shared_by__id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(shared_by__id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (storage_path__id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("storage_path__id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(storage_path__id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (storage_path__id__in != null)
                    {
                        bool isAfterFirst = false;
                        foreach (var item_ in storage_path__id__in)
                        {
                            if (!isAfterFirst)
                            {
                                urlBuilder_.Append(System.Uri.EscapeDataString("storage_path__id__in")).Append('=');
                            }
                            urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append(',');
                            isAfterFirst = true;
                        }
                        if (isAfterFirst)
                        {
                            urlBuilder_.Length--;
                            urlBuilder_.Append('&');
                        }
                    }
                    if (storage_path__id__none != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("storage_path__id__none")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(storage_path__id__none, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (storage_path__isnull != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("storage_path__isnull")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(storage_path__isnull, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (storage_path__name__icontains != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("storage_path__name__icontains")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(storage_path__name__icontains, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (storage_path__name__iendswith != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("storage_path__name__iendswith")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(storage_path__name__iendswith, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (storage_path__name__iexact != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("storage_path__name__iexact")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(storage_path__name__iexact, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (storage_path__name__istartswith != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("storage_path__name__istartswith")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(storage_path__name__istartswith, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tags__id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tags__id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tags__id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tags__id__all != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tags__id__all")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tags__id__all, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tags__id__in != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tags__id__in")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tags__id__in, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tags__id__none != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tags__id__none")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tags__id__none, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tags__name__icontains != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tags__name__icontains")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tags__name__icontains, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tags__name__iendswith != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tags__name__iendswith")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tags__name__iendswith, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tags__name__iexact != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tags__name__iexact")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tags__name__iexact, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (tags__name__istartswith != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("tags__name__istartswith")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(tags__name__istartswith, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (title__icontains != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("title__icontains")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(title__icontains, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (title__iendswith != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("title__iendswith")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(title__iendswith, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (title__iexact != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("title__iexact")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(title__iexact, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (title__istartswith != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("title__istartswith")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(title__istartswith, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (title_content != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("title_content")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(title_content, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PaginatedDocumentList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Retrieve a single document
        /// </remarks>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Dokument identifiziert.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Document> ApiDocumentsGetAsync(int id, System.Collections.Generic.IEnumerable<string>? fields = null, bool? full_perms = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/documents/{id}/"
                    urlBuilder_.Append("api/documents/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append('?');
                    if (fields != null)
                    {
                            foreach (var item_ in fields) { urlBuilder_.Append(System.Uri.EscapeDataString("fields")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append('&'); }
                    }
                    if (full_perms != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("full_perms")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(full_perms, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Document>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("No response body", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Pass a user object to serializer
        /// </remarks>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Dokument identifiziert.</param>
        /// <param name="content">Der Inhalt des Dokuments in Textform. Dieses Feld wird primär für die Suche verwendet.</param>
        /// <param name="archive_serial_number">Die Position dieses Dokuments in Ihrem physischen Dokumentenarchiv.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Document> ApiDocumentsPutAsync(int id, DocumentRequest body, int? correspondent = null, int? document_type = null, int? storage_path = null, string? title = null, string? content = null, System.Collections.Generic.IEnumerable<int>? tags = null, System.DateTimeOffset? created = null, System.DateTimeOffset? created_date = null, System.DateTimeOffset? deleted_at = null, long? archive_serial_number = null, int? owner = null, Set_permissions5? set_permissions = null, System.Collections.Generic.IEnumerable<CustomFieldInstanceRequest>? custom_fields = null, bool? remove_inbox_tags = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/documents/{id}/"
                    urlBuilder_.Append("api/documents/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Document>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Pass a user object to serializer
        /// </remarks>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Dokument identifiziert.</param>
        /// <param name="content">Der Inhalt des Dokuments in Textform. Dieses Feld wird primär für die Suche verwendet.</param>
        /// <param name="archive_serial_number">Die Position dieses Dokuments in Ihrem physischen Dokumentenarchiv.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Document> ApiDocumentsPatchAsync(int id, PatchedDocumentRequest? body = null, int? correspondent = null, int? document_type = null, int? storage_path = null, string? title = null, string? content = null, System.Collections.Generic.IEnumerable<int>? tags = null, System.DateTimeOffset? created = null, System.DateTimeOffset? created_date = null, System.DateTimeOffset? deleted_at = null, long? archive_serial_number = null, int? owner = null, Set_permissions6? set_permissions = null, System.Collections.Generic.IEnumerable<CustomFieldInstanceRequest>? custom_fields = null, bool? remove_inbox_tags = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/documents/{id}/"
                    urlBuilder_.Append("api/documents/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Document>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Pass a user object to serializer
        /// </remarks>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Dokument identifiziert.</param>
        /// <returns>No response body</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ApiDocumentsDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/documents/{id}/"
                    urlBuilder_.Append("api/documents/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Download the document
        /// </remarks>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Dokument identifiziert.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> ApiDocumentsDownloadAsync(int id, bool? original = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/documents/{id}/download/"
                    urlBuilder_.Append("api/documents/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/download/");
                    urlBuilder_.Append('?');
                    if (original != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("original")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(original, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await ReadAsStreamAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Email the document to one or more recipients as an attachment.
        /// </remarks>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Dokument identifiziert.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<EmailResponse> ApiDocumentsEmailAsync(int id, EmailRequestRequest body, string? addresses = null, string? subject = null, string? message = null, bool? use_archive_version = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/documents/{id}/email/"
                    urlBuilder_.Append("api/documents/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/email/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<EmailResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("No response body", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("No response body", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("No response body", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("No response body", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// View the document history
        /// </remarks>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Dokument identifiziert.</param>
        /// <param name="page">Eine Seitenzahl in der paginierten Ergebnismenge.</param>
        /// <param name="page_size">Anzahl der pro Seite zurückzugebenden Ergebnisse.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PaginatedLogEntryList> ApiDocumentsHistoryAsync(int id, int? page = null, int? page_size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/documents/{id}/history/"
                    urlBuilder_.Append("api/documents/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/history/");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page_size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PaginatedLogEntryList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("No response body", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("No response body", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("No response body", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// View the document metadata
        /// </remarks>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Dokument identifiziert.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Metadata> ApiDocumentsMetadataAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/documents/{id}/metadata/"
                    urlBuilder_.Append("api/documents/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/metadata/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Metadata>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("No response body", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("No response body", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("No response body", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// View, add, or delete notes for the document
        /// </remarks>
        /// <param name="idPath">Ein eindeutiger Ganzzahl-Wert, der Dokument identifiziert.</param>
        /// <param name="idQuery">Note ID to delete (used only for DELETE requests)</param>
        /// <param name="page">Eine Seitenzahl in der paginierten Ergebnismenge.</param>
        /// <param name="page_size">Anzahl der pro Seite zurückzugebenden Ergebnisse.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PaginatedNotesList> ApiDocumentsNotesGetAsync(int idPath, int? idQuery = null, int? page = null, int? page_size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (idPath == null)
                throw new System.ArgumentNullException("idPath");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/documents/{id}/notes/"
                    urlBuilder_.Append("api/documents/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(idPath, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/notes/");
                    urlBuilder_.Append('?');
                    if (idQuery != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(idQuery, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page_size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PaginatedNotesList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("No response body", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("No response body", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("No response body", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// View, add, or delete notes for the document
        /// </remarks>
        /// <param name="idPath">Ein eindeutiger Ganzzahl-Wert, der Dokument identifiziert.</param>
        /// <param name="idQuery">Note ID to delete (used only for DELETE requests)</param>
        /// <param name="page">Eine Seitenzahl in der paginierten Ergebnismenge.</param>
        /// <param name="page_size">Anzahl der pro Seite zurückzugebenden Ergebnisse.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PaginatedNotesList> ApiDocumentsNotesPostAsync(int idPath, NoteCreateRequestRequest body, int? idQuery = null, int? page = null, int? page_size = null, string? note = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (idPath == null)
                throw new System.ArgumentNullException("idPath");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/documents/{id}/notes/"
                    urlBuilder_.Append("api/documents/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(idPath, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/notes/");
                    urlBuilder_.Append('?');
                    if (idQuery != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(idQuery, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page_size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PaginatedNotesList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("No response body", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("No response body", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("No response body", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// View, add, or delete notes for the document
        /// </remarks>
        /// <param name="idPath">Ein eindeutiger Ganzzahl-Wert, der Dokument identifiziert.</param>
        /// <param name="idQuery">Note ID to delete (used only for DELETE requests)</param>
        /// <param name="page">Eine Seitenzahl in der paginierten Ergebnismenge.</param>
        /// <param name="page_size">Anzahl der pro Seite zurückzugebenden Ergebnisse.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PaginatedNotesList> ApiDocumentsNotesDeleteAsync(int idPath, int? idQuery = null, int? page = null, int? page_size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (idPath == null)
                throw new System.ArgumentNullException("idPath");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/documents/{id}/notes/"
                    urlBuilder_.Append("api/documents/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(idPath, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/notes/");
                    urlBuilder_.Append('?');
                    if (idQuery != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(idQuery, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page_size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PaginatedNotesList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("No response body", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("No response body", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("No response body", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// View the document preview
        /// </remarks>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Dokument identifiziert.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> ApiDocumentsPreviewAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/documents/{id}/preview/"
                    urlBuilder_.Append("api/documents/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/preview/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await ReadAsStreamAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// View share links for the document
        /// </remarks>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous>> ApiDocumentsShareLinksAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/documents/{id}/share_links/"
                    urlBuilder_.Append("api/documents/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/share_links/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Anonymous>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("No response body", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("No response body", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("No response body", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// View suggestions for the document
        /// </remarks>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Dokument identifiziert.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Suggestions> ApiDocumentsSuggestionsAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/documents/{id}/suggestions/"
                    urlBuilder_.Append("api/documents/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/suggestions/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Suggestions>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("No response body", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("No response body", status_, responseText_, headers_, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("No response body", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// View the document thumbnail
        /// </remarks>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Dokument identifiziert.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FileResponse> ApiDocumentsThumbAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/documents/{id}/thumb/"
                    urlBuilder_.Append("api/documents/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/thumb/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200 || status_ == 206)
                        {
                            var responseStream_ = response_.Content == null ? System.IO.Stream.Null : await ReadAsStreamAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            var fileResponse_ = new FileResponse(status_, headers_, responseStream_, null, response_);
                            disposeClient_ = false; disposeResponse_ = false; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BulkDownload> ApiDocumentsBulkDownloadAsync(BulkDownloadRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/documents/bulk_download/"
                    urlBuilder_.Append("api/documents/bulk_download/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BulkDownload>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Perform a bulk edit operation on a list of documents
        /// </remarks>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<BulkEditDocumentsResult> ApiDocumentsBulkEditAsync(BulkEditRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/documents/bulk_edit/"
                    urlBuilder_.Append("api/documents/bulk_edit/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BulkEditDocumentsResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Get the next available Archive Serial Number (ASN) for a new document
        /// </remarks>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<int> ApiDocumentsNextAsnAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/documents/next_asn/"
                    urlBuilder_.Append("api/documents/next_asn/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Upload a document via the API
        /// </remarks>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> ApiDocumentsPostDocumentAsync(System.DateTimeOffset? created = null, FileParameter document = null, string? title = null, int? correspondent = null, int? document_type = null, int? storage_path = null, System.Collections.Generic.IEnumerable<int>? tags = null, long? archive_serial_number = null, System.Collections.Generic.IEnumerable<int>? custom_fields = null, bool? from_webui = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var boundary_ = System.Guid.NewGuid().ToString();
                    var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                    content_.Headers.Remove("Content-Type");
                    content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);

                    if (created != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(created, System.Globalization.CultureInfo.InvariantCulture)), "created");
                    }

                    if (document == null)
                        throw new System.ArgumentNullException("document");
                    else
                    {
                        var content_document_ = new System.Net.Http.StreamContent(document.Data);
                        if (!string.IsNullOrEmpty(document.ContentType))
                            content_document_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse(document.ContentType);
                        content_.Add(content_document_, "document", document.FileName ?? "document");
                    }

                    if (title == null)
                        throw new System.ArgumentNullException("title");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(title, System.Globalization.CultureInfo.InvariantCulture)), "title");
                    }

                    if (correspondent != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(correspondent, System.Globalization.CultureInfo.InvariantCulture)), "correspondent");
                    }

                    if (document_type != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(document_type, System.Globalization.CultureInfo.InvariantCulture)), "document_type");
                    }

                    if (storage_path != null)
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(storage_path, System.Globalization.CultureInfo.InvariantCulture)), "storage_path");
                    }

                    if (tags == null)
                        throw new System.ArgumentNullException("tags");
                    else
                    {
                        foreach (var item_ in tags)
                        {
                            content_.Add(new System.Net.Http.StringContent(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture)), "tags");
                        }
                    }

                    if (archive_serial_number == null)
                        throw new System.ArgumentNullException("archive_serial_number");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(archive_serial_number, System.Globalization.CultureInfo.InvariantCulture)), "archive_serial_number");
                    }

                    if (custom_fields == null)
                        throw new System.ArgumentNullException("custom_fields");
                    else
                    {
                        foreach (var item_ in custom_fields)
                        {
                            content_.Add(new System.Net.Http.StringContent(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture)), "custom_fields");
                        }
                    }

                    if (from_webui == null)
                        throw new System.ArgumentNullException("from_webui");
                    else
                    {
                        content_.Add(new System.Net.Http.StringContent(ConvertToString(from_webui, System.Globalization.CultureInfo.InvariantCulture)), "from_webui");
                    }
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/documents/post_document/"
                    urlBuilder_.Append("api/documents/post_document/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Get selection data for the selected documents
        /// </remarks>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SelectionData> ApiDocumentsSelectionDataAsync(DocumentListRequest body, System.Collections.Generic.IEnumerable<int>? documents = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("multipart/form-data");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/documents/selection_data/"
                    urlBuilder_.Append("api/documents/selection_data/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SelectionData>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="ordering">Feld, das zum Sortieren der Ergebnisse verwendet werden soll.</param>
        /// <param name="page">Eine Seitenzahl in der paginierten Ergebnismenge.</param>
        /// <param name="page_size">Anzahl der pro Seite zurückzugebenden Ergebnisse.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PaginatedGroupList> ApiGroupsGetAsync(string? name__icontains = null, string? name__iendswith = null, string? name__iexact = null, string? name__istartswith = null, string? ordering = null, int? page = null, int? page_size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/groups/"
                    urlBuilder_.Append("api/groups/");
                    urlBuilder_.Append('?');
                    if (name__icontains != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name__icontains")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name__icontains, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name__iendswith != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name__iendswith")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name__iendswith, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name__iexact != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name__iexact")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name__iexact, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name__istartswith != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name__istartswith")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name__istartswith, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (ordering != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("ordering")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ordering, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page_size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PaginatedGroupList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Group> ApiGroupsPostAsync(GroupRequest body, string? name = null, System.Collections.Generic.IEnumerable<string>? permissions = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/groups/"
                    urlBuilder_.Append("api/groups/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Group>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Gruppe identifiziert.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Group> ApiGroupsGetAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/groups/{id}/"
                    urlBuilder_.Append("api/groups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Group>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Gruppe identifiziert.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Group> ApiGroupsPutAsync(int id, GroupRequest body, string? name = null, System.Collections.Generic.IEnumerable<string>? permissions = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/groups/{id}/"
                    urlBuilder_.Append("api/groups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Group>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Gruppe identifiziert.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Group> ApiGroupsPatchAsync(int id, PatchedGroupRequest? body = null, string? name = null, System.Collections.Generic.IEnumerable<string>? permissions = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/groups/{id}/"
                    urlBuilder_.Append("api/groups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Group>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Gruppe identifiziert.</param>
        /// <returns>No response body</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ApiGroupsDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/groups/{id}/"
                    urlBuilder_.Append("api/groups/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Logs view
        /// </remarks>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> ApiLogsGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/logs/"
                    urlBuilder_.Append("api/logs/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<string>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Single log view
        /// </remarks>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> ApiLogsGetAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/logs/{id}/"
                    urlBuilder_.Append("api/logs/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<string>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("No response body", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="page">Eine Seitenzahl in der paginierten Ergebnismenge.</param>
        /// <param name="page_size">Anzahl der pro Seite zurückzugebenden Ergebnisse.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PaginatedMailAccountList> ApiMailAccountsGetAsync(int? page = null, int? page_size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/mail_accounts/"
                    urlBuilder_.Append("api/mail_accounts/");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page_size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PaginatedMailAccountList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="imap_port">Dies ist in der Regel 143 für unverschlüsselte und STARTTLS-Verbindungen und 993 für SSL-Verbindungen.</param>
        /// <param name="character_set">Der Zeichensatz, der bei der Kommunikation mit dem E-Mail-Server verwendet werden soll, wie z. B. „UTF-8“ oder „US-ASCII“.</param>
        /// <param name="expiration">Das Ablaufdatum des Aktualisierungstokens.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MailAccount> ApiMailAccountsPostAsync(MailAccountRequest body, string? name = null, string? imap_server = null, int? imap_port = null, ImapSecurityEnum? imap_security = null, string? username = null, string? password = null, string? character_set = null, bool? is_token = null, int? owner = null, Set_permissions7? set_permissions = null, AccountTypeEnum? account_type = null, System.DateTimeOffset? expiration = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/mail_accounts/"
                    urlBuilder_.Append("api/mail_accounts/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MailAccount>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der E-Mail-Konto identifiziert.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MailAccount> ApiMailAccountsGetAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/mail_accounts/{id}/"
                    urlBuilder_.Append("api/mail_accounts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MailAccount>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der E-Mail-Konto identifiziert.</param>
        /// <param name="imap_port">Dies ist in der Regel 143 für unverschlüsselte und STARTTLS-Verbindungen und 993 für SSL-Verbindungen.</param>
        /// <param name="character_set">Der Zeichensatz, der bei der Kommunikation mit dem E-Mail-Server verwendet werden soll, wie z. B. „UTF-8“ oder „US-ASCII“.</param>
        /// <param name="expiration">Das Ablaufdatum des Aktualisierungstokens.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MailAccount> ApiMailAccountsPutAsync(int id, MailAccountRequest body, string? name = null, string? imap_server = null, int? imap_port = null, ImapSecurityEnum? imap_security = null, string? username = null, string? password = null, string? character_set = null, bool? is_token = null, int? owner = null, Set_permissions7? set_permissions = null, AccountTypeEnum? account_type = null, System.DateTimeOffset? expiration = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/mail_accounts/{id}/"
                    urlBuilder_.Append("api/mail_accounts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MailAccount>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der E-Mail-Konto identifiziert.</param>
        /// <param name="imap_port">Dies ist in der Regel 143 für unverschlüsselte und STARTTLS-Verbindungen und 993 für SSL-Verbindungen.</param>
        /// <param name="character_set">Der Zeichensatz, der bei der Kommunikation mit dem E-Mail-Server verwendet werden soll, wie z. B. „UTF-8“ oder „US-ASCII“.</param>
        /// <param name="expiration">Das Ablaufdatum des Aktualisierungstokens.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MailAccount> ApiMailAccountsPatchAsync(int id, PatchedMailAccountRequest? body = null, string? name = null, string? imap_server = null, int? imap_port = null, ImapSecurityEnum? imap_security = null, string? username = null, string? password = null, string? character_set = null, bool? is_token = null, int? owner = null, Set_permissions8? set_permissions = null, AccountTypeEnum? account_type = null, System.DateTimeOffset? expiration = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/mail_accounts/{id}/"
                    urlBuilder_.Append("api/mail_accounts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MailAccount>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der E-Mail-Konto identifiziert.</param>
        /// <returns>No response body</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ApiMailAccountsDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/mail_accounts/{id}/"
                    urlBuilder_.Append("api/mail_accounts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Manually process the selected mail account for new messages.
        /// </remarks>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der E-Mail-Konto identifiziert.</param>
        /// <param name="imap_port">Dies ist in der Regel 143 für unverschlüsselte und STARTTLS-Verbindungen und 993 für SSL-Verbindungen.</param>
        /// <param name="character_set">Der Zeichensatz, der bei der Kommunikation mit dem E-Mail-Server verwendet werden soll, wie z. B. „UTF-8“ oder „US-ASCII“.</param>
        /// <param name="expiration">Das Ablaufdatum des Aktualisierungstokens.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MailAccountProcessResponse> ApiMailAccountsProcessAsync(int id, MailAccountRequest body, string? name = null, string? imap_server = null, int? imap_port = null, ImapSecurityEnum? imap_security = null, string? username = null, string? password = null, string? character_set = null, bool? is_token = null, int? owner = null, Set_permissions7? set_permissions = null, AccountTypeEnum? account_type = null, System.DateTimeOffset? expiration = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/mail_accounts/{id}/process/"
                    urlBuilder_.Append("api/mail_accounts/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/process/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MailAccountProcessResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("No response body", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Test a mail account
        /// </remarks>
        /// <param name="imap_port">Dies ist in der Regel 143 für unverschlüsselte und STARTTLS-Verbindungen und 993 für SSL-Verbindungen.</param>
        /// <param name="character_set">Der Zeichensatz, der bei der Kommunikation mit dem E-Mail-Server verwendet werden soll, wie z. B. „UTF-8“ oder „US-ASCII“.</param>
        /// <param name="expiration">Das Ablaufdatum des Aktualisierungstokens.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MailAccountTestResponse> ApiMailAccountsTestAsync(MailAccountRequest body, string? name = null, string? imap_server = null, int? imap_port = null, ImapSecurityEnum? imap_security = null, string? username = null, string? password = null, string? character_set = null, bool? is_token = null, int? owner = null, Set_permissions7? set_permissions = null, AccountTypeEnum? account_type = null, System.DateTimeOffset? expiration = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/mail_accounts/test/"
                    urlBuilder_.Append("api/mail_accounts/test/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MailAccountTestResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="page">Eine Seitenzahl in der paginierten Ergebnismenge.</param>
        /// <param name="page_size">Anzahl der pro Seite zurückzugebenden Ergebnisse.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PaginatedMailRuleList> ApiMailRulesGetAsync(int? page = null, int? page_size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/mail_rules/"
                    urlBuilder_.Append("api/mail_rules/");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page_size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PaginatedMailRuleList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="folder">Unterordner müssen durch ein Trennzeichen, oft einen Punkt („.“) oder einen Schrägstrich („/“), getrennt werden. Dies variiert jedoch je nach Mailserver.</param>
        /// <param name="filter_attachment_filename_include">Nur Dokumente, die vollständig mit diesem Dateinamen (falls angegeben) übereinstimmen, verarbeiten. Platzhalter wie *.pdf oder *rechnung* sind erlaubt. Groß- und Kleinschreibung wird nicht beachtet.</param>
        /// <param name="filter_attachment_filename_exclude">Dokumente, die vollständig mit diesem Dateinamen (falls angegeben) übereinstimmen, nicht verarbeiten. Platzhalter wie *.pdf oder *rechnung* sind erlaubt. Groß- und Kleinschreibung wird nicht beachtet.</param>
        /// <param name="maximum_age">Angegeben in Tagen.</param>
        /// <param name="attachment_type">„Inline“-Anhänge schließen eingebettete Bilder mit ein, daher sollte diese Einstellung mit einem Dateinamenfilter kombiniert werden.
        /// <br/>
        /// <br/>* `1` - Nur Anhänge verarbeiten.
        /// <br/>* `2` - Alle Dateien verarbeiten, auch 'inline'-Anhänge.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MailRule> ApiMailRulesPostAsync(MailRuleRequest body, string? name = null, int? account = null, bool? enabled = null, string? folder = null, string? filter_from = null, string? filter_to = null, string? filter_subject = null, string? filter_body = null, string? filter_attachment_filename_include = null, string? filter_attachment_filename_exclude = null, int? maximum_age = null, MailRuleActionEnum? action = null, string? action_parameter = null, AssignTitleFromEnum? assign_title_from = null, System.Collections.Generic.IEnumerable<int?>? assign_tags = null, AssignCorrespondentFromEnum? assign_correspondent_from = null, int? assign_correspondent = null, int? assign_document_type = null, bool? assign_owner_from_rule = null, int? order = null, AttachmentTypeEnum? attachment_type = null, ConsumptionScopeEnum? consumption_scope = null, PdfLayoutEnum? pdf_layout = null, int? owner = null, Set_permissions9? set_permissions = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/mail_rules/"
                    urlBuilder_.Append("api/mail_rules/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MailRule>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der E-Mail-Regel identifiziert.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MailRule> ApiMailRulesGetAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/mail_rules/{id}/"
                    urlBuilder_.Append("api/mail_rules/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MailRule>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der E-Mail-Regel identifiziert.</param>
        /// <param name="folder">Unterordner müssen durch ein Trennzeichen, oft einen Punkt („.“) oder einen Schrägstrich („/“), getrennt werden. Dies variiert jedoch je nach Mailserver.</param>
        /// <param name="filter_attachment_filename_include">Nur Dokumente, die vollständig mit diesem Dateinamen (falls angegeben) übereinstimmen, verarbeiten. Platzhalter wie *.pdf oder *rechnung* sind erlaubt. Groß- und Kleinschreibung wird nicht beachtet.</param>
        /// <param name="filter_attachment_filename_exclude">Dokumente, die vollständig mit diesem Dateinamen (falls angegeben) übereinstimmen, nicht verarbeiten. Platzhalter wie *.pdf oder *rechnung* sind erlaubt. Groß- und Kleinschreibung wird nicht beachtet.</param>
        /// <param name="maximum_age">Angegeben in Tagen.</param>
        /// <param name="attachment_type">„Inline“-Anhänge schließen eingebettete Bilder mit ein, daher sollte diese Einstellung mit einem Dateinamenfilter kombiniert werden.
        /// <br/>
        /// <br/>* `1` - Nur Anhänge verarbeiten.
        /// <br/>* `2` - Alle Dateien verarbeiten, auch 'inline'-Anhänge.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MailRule> ApiMailRulesPutAsync(int id, MailRuleRequest body, string? name = null, int? account = null, bool? enabled = null, string? folder = null, string? filter_from = null, string? filter_to = null, string? filter_subject = null, string? filter_body = null, string? filter_attachment_filename_include = null, string? filter_attachment_filename_exclude = null, int? maximum_age = null, MailRuleActionEnum? action = null, string? action_parameter = null, AssignTitleFromEnum? assign_title_from = null, System.Collections.Generic.IEnumerable<int?>? assign_tags = null, AssignCorrespondentFromEnum? assign_correspondent_from = null, int? assign_correspondent = null, int? assign_document_type = null, bool? assign_owner_from_rule = null, int? order = null, AttachmentTypeEnum? attachment_type = null, ConsumptionScopeEnum? consumption_scope = null, PdfLayoutEnum? pdf_layout = null, int? owner = null, Set_permissions9? set_permissions = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/mail_rules/{id}/"
                    urlBuilder_.Append("api/mail_rules/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MailRule>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der E-Mail-Regel identifiziert.</param>
        /// <param name="folder">Unterordner müssen durch ein Trennzeichen, oft einen Punkt („.“) oder einen Schrägstrich („/“), getrennt werden. Dies variiert jedoch je nach Mailserver.</param>
        /// <param name="filter_attachment_filename_include">Nur Dokumente, die vollständig mit diesem Dateinamen (falls angegeben) übereinstimmen, verarbeiten. Platzhalter wie *.pdf oder *rechnung* sind erlaubt. Groß- und Kleinschreibung wird nicht beachtet.</param>
        /// <param name="filter_attachment_filename_exclude">Dokumente, die vollständig mit diesem Dateinamen (falls angegeben) übereinstimmen, nicht verarbeiten. Platzhalter wie *.pdf oder *rechnung* sind erlaubt. Groß- und Kleinschreibung wird nicht beachtet.</param>
        /// <param name="maximum_age">Angegeben in Tagen.</param>
        /// <param name="attachment_type">„Inline“-Anhänge schließen eingebettete Bilder mit ein, daher sollte diese Einstellung mit einem Dateinamenfilter kombiniert werden.
        /// <br/>
        /// <br/>* `1` - Nur Anhänge verarbeiten.
        /// <br/>* `2` - Alle Dateien verarbeiten, auch 'inline'-Anhänge.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<MailRule> ApiMailRulesPatchAsync(int id, PatchedMailRuleRequest? body = null, string? name = null, int? account = null, bool? enabled = null, string? folder = null, string? filter_from = null, string? filter_to = null, string? filter_subject = null, string? filter_body = null, string? filter_attachment_filename_include = null, string? filter_attachment_filename_exclude = null, int? maximum_age = null, MailRuleActionEnum? action = null, string? action_parameter = null, AssignTitleFromEnum? assign_title_from = null, System.Collections.Generic.IEnumerable<int?>? assign_tags = null, AssignCorrespondentFromEnum? assign_correspondent_from = null, int? assign_correspondent = null, int? assign_document_type = null, bool? assign_owner_from_rule = null, int? order = null, AttachmentTypeEnum? attachment_type = null, ConsumptionScopeEnum? consumption_scope = null, PdfLayoutEnum? pdf_layout = null, int? owner = null, Set_permissions10? set_permissions = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/mail_rules/{id}/"
                    urlBuilder_.Append("api/mail_rules/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MailRule>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der E-Mail-Regel identifiziert.</param>
        /// <returns>No response body</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ApiMailRulesDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/mail_rules/{id}/"
                    urlBuilder_.Append("api/mail_rules/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Callback view for OAuth2 authentication
        /// </remarks>
        /// <returns>No response body</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ApiOauthCallbackAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/oauth/callback/"
                    urlBuilder_.Append("api/oauth/callback/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// User profile view, only available when logged in
        /// </remarks>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Profile> ApiProfileGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/profile/"
                    urlBuilder_.Append("api/profile/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Profile>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// User profile view, only available when logged in
        /// </remarks>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Profile> ApiProfilePatchAsync(PatchedProfileRequest? body = null, string? email = null, string? password = null, string? first_name = null, string? last_name = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/profile/"
                    urlBuilder_.Append("api/profile/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Profile>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Disconnects a social account provider from the user account
        /// </remarks>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<int> ApiProfileDisconnectSocialAccountAsync(Body? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/profile/disconnect_social_account/"
                    urlBuilder_.Append("api/profile/disconnect_social_account/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<int>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Generates (or re-generates) an auth token, requires a logged in user
        /// <br/>unlike the default DRF endpoint
        /// </remarks>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<string> ApiProfileGenerateAuthTokenAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/profile/generate_auth_token/"
                    urlBuilder_.Append("api/profile/generate_auth_token/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// List of social account providers
        /// </remarks>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, object>> ApiProfileSocialAccountProvidersAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/profile/social_account_providers/"
                    urlBuilder_.Append("api/profile/social_account_providers/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.IDictionary<string, object>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Generates a new TOTP secret and returns the URL and SVG
        /// </remarks>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, object>> ApiProfileTotpGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/profile/totp/"
                    urlBuilder_.Append("api/profile/totp/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.IDictionary<string, object>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Validates a TOTP code and activates the TOTP authenticator
        /// </remarks>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, object>> ApiProfileTotpPostAsync(Body2? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/profile/totp/"
                    urlBuilder_.Append("api/profile/totp/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.IDictionary<string, object>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Deactivates the TOTP authenticator
        /// </remarks>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<bool> ApiProfileTotpDeleteAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/profile/totp/"
                    urlBuilder_.Append("api/profile/totp/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Get the current version of the Paperless-NGX server
        /// </remarks>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, object>> ApiRemoteVersionAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/remote_version/"
                    urlBuilder_.Append("api/remote_version/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.IDictionary<string, object>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="page">Eine Seitenzahl in der paginierten Ergebnismenge.</param>
        /// <param name="page_size">Anzahl der pro Seite zurückzugebenden Ergebnisse.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PaginatedSavedViewList> ApiSavedViewsGetAsync(int? page = null, int? page_size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/saved_views/"
                    urlBuilder_.Append("api/saved_views/");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page_size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PaginatedSavedViewList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SavedView> ApiSavedViewsPostAsync(SavedViewRequest body, string? name = null, bool? show_on_dashboard = null, bool? show_in_sidebar = null, string? sort_field = null, bool? sort_reverse = null, System.Collections.Generic.IEnumerable<SavedViewFilterRuleRequest>? filter_rules = null, int? page_size = null, DisplayModeEnum? display_mode = null, object? display_fields = null, int? owner = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/saved_views/"
                    urlBuilder_.Append("api/saved_views/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SavedView>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Gespeicherte Ansicht identifiziert.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SavedView> ApiSavedViewsGetAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/saved_views/{id}/"
                    urlBuilder_.Append("api/saved_views/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SavedView>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Gespeicherte Ansicht identifiziert.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SavedView> ApiSavedViewsPutAsync(int id, SavedViewRequest body, string? name = null, bool? show_on_dashboard = null, bool? show_in_sidebar = null, string? sort_field = null, bool? sort_reverse = null, System.Collections.Generic.IEnumerable<SavedViewFilterRuleRequest>? filter_rules = null, int? page_size = null, DisplayModeEnum? display_mode = null, object? display_fields = null, int? owner = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/saved_views/{id}/"
                    urlBuilder_.Append("api/saved_views/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SavedView>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Gespeicherte Ansicht identifiziert.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SavedView> ApiSavedViewsPatchAsync(int id, PatchedSavedViewRequest? body = null, string? name = null, bool? show_on_dashboard = null, bool? show_in_sidebar = null, string? sort_field = null, bool? sort_reverse = null, System.Collections.Generic.IEnumerable<SavedViewFilterRuleRequest>? filter_rules = null, int? page_size = null, DisplayModeEnum? display_mode = null, object? display_fields = null, int? owner = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/saved_views/{id}/"
                    urlBuilder_.Append("api/saved_views/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SavedView>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Gespeicherte Ansicht identifiziert.</param>
        /// <returns>No response body</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ApiSavedViewsDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/saved_views/{id}/"
                    urlBuilder_.Append("api/saved_views/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Global search
        /// </remarks>
        /// <param name="query">Query to search for</param>
        /// <param name="db_only">Search only the database</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SearchResult> ApiSearchAsync(string query, bool? db_only = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (query == null)
                throw new System.ArgumentNullException("query");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/search/"
                    urlBuilder_.Append("api/search/");
                    urlBuilder_.Append('?');
                    urlBuilder_.Append(System.Uri.EscapeDataString("query")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(query, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    if (db_only != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("db_only")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(db_only, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SearchResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Get a list of all available tags
        /// </remarks>
        /// <param name="limit">Number of completions to return</param>
        /// <param name="term">Term to search for</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> ApiSearchAutocompleteAsync(int? limit = null, string? term = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/search/autocomplete/"
                    urlBuilder_.Append("api/search/autocomplete/");
                    urlBuilder_.Append('?');
                    if (limit != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("limit")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (term != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("term")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(term, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<string>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="ordering">Feld, das zum Sortieren der Ergebnisse verwendet werden soll.</param>
        /// <param name="page">Eine Seitenzahl in der paginierten Ergebnismenge.</param>
        /// <param name="page_size">Anzahl der pro Seite zurückzugebenden Ergebnisse.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PaginatedShareLinkList> ApiShareLinksGetAsync(System.DateTimeOffset? created__date__gt = null, System.DateTimeOffset? created__date__gte = null, System.DateTimeOffset? created__date__lt = null, System.DateTimeOffset? created__date__lte = null, double? created__day = null, System.DateTimeOffset? created__gt = null, System.DateTimeOffset? created__gte = null, System.DateTimeOffset? created__lt = null, System.DateTimeOffset? created__lte = null, double? created__month = null, double? created__year = null, System.DateTimeOffset? expiration__date__gt = null, System.DateTimeOffset? expiration__date__gte = null, System.DateTimeOffset? expiration__date__lt = null, System.DateTimeOffset? expiration__date__lte = null, double? expiration__day = null, System.DateTimeOffset? expiration__gt = null, System.DateTimeOffset? expiration__gte = null, System.DateTimeOffset? expiration__lt = null, System.DateTimeOffset? expiration__lte = null, double? expiration__month = null, double? expiration__year = null, string? ordering = null, int? page = null, int? page_size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/share_links/"
                    urlBuilder_.Append("api/share_links/");
                    urlBuilder_.Append('?');
                    if (created__date__gt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("created__date__gt")).Append('=').Append(System.Uri.EscapeDataString(created__date__gt.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (created__date__gte != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("created__date__gte")).Append('=').Append(System.Uri.EscapeDataString(created__date__gte.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (created__date__lt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("created__date__lt")).Append('=').Append(System.Uri.EscapeDataString(created__date__lt.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (created__date__lte != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("created__date__lte")).Append('=').Append(System.Uri.EscapeDataString(created__date__lte.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (created__day != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("created__day")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(created__day, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (created__gt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("created__gt")).Append('=').Append(System.Uri.EscapeDataString(created__gt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (created__gte != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("created__gte")).Append('=').Append(System.Uri.EscapeDataString(created__gte.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (created__lt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("created__lt")).Append('=').Append(System.Uri.EscapeDataString(created__lt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (created__lte != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("created__lte")).Append('=').Append(System.Uri.EscapeDataString(created__lte.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (created__month != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("created__month")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(created__month, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (created__year != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("created__year")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(created__year, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (expiration__date__gt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("expiration__date__gt")).Append('=').Append(System.Uri.EscapeDataString(expiration__date__gt.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (expiration__date__gte != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("expiration__date__gte")).Append('=').Append(System.Uri.EscapeDataString(expiration__date__gte.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (expiration__date__lt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("expiration__date__lt")).Append('=').Append(System.Uri.EscapeDataString(expiration__date__lt.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (expiration__date__lte != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("expiration__date__lte")).Append('=').Append(System.Uri.EscapeDataString(expiration__date__lte.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (expiration__day != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("expiration__day")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(expiration__day, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (expiration__gt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("expiration__gt")).Append('=').Append(System.Uri.EscapeDataString(expiration__gt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (expiration__gte != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("expiration__gte")).Append('=').Append(System.Uri.EscapeDataString(expiration__gte.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (expiration__lt != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("expiration__lt")).Append('=').Append(System.Uri.EscapeDataString(expiration__lt.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (expiration__lte != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("expiration__lte")).Append('=').Append(System.Uri.EscapeDataString(expiration__lte.Value.ToString("s", System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (expiration__month != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("expiration__month")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(expiration__month, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (expiration__year != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("expiration__year")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(expiration__year, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (ordering != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("ordering")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ordering, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page_size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PaginatedShareLinkList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShareLink> ApiShareLinksPostAsync(ShareLinkRequest? body = null, System.DateTimeOffset? expiration = null, int? document = null, FileVersionEnum? file_version = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/share_links/"
                    urlBuilder_.Append("api/share_links/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ShareLink>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Freigabelink identifiziert.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShareLink> ApiShareLinksGetAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/share_links/{id}/"
                    urlBuilder_.Append("api/share_links/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ShareLink>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Freigabelink identifiziert.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShareLink> ApiShareLinksPutAsync(int id, ShareLinkRequest? body = null, System.DateTimeOffset? expiration = null, int? document = null, FileVersionEnum? file_version = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/share_links/{id}/"
                    urlBuilder_.Append("api/share_links/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ShareLink>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Freigabelink identifiziert.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ShareLink> ApiShareLinksPatchAsync(int id, PatchedShareLinkRequest? body = null, System.DateTimeOffset? expiration = null, int? document = null, FileVersionEnum? file_version = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/share_links/{id}/"
                    urlBuilder_.Append("api/share_links/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ShareLink>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Freigabelink identifiziert.</param>
        /// <returns>No response body</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ApiShareLinksDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/share_links/{id}/"
                    urlBuilder_.Append("api/share_links/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Get statistics for the current user
        /// </remarks>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, object>> ApiStatisticsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/statistics/"
                    urlBuilder_.Append("api/statistics/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.IDictionary<string, object>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Get the current system status of the Paperless-NGX server
        /// </remarks>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<SystemStatus> ApiStatusAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/status/"
                    urlBuilder_.Append("api/status/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<SystemStatus>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id__in">Mehrere Werte können durch Kommas getrennt sein.</param>
        /// <param name="ordering">Feld, das zum Sortieren der Ergebnisse verwendet werden soll.</param>
        /// <param name="page">Eine Seitenzahl in der paginierten Ergebnismenge.</param>
        /// <param name="page_size">Anzahl der pro Seite zurückzugebenden Ergebnisse.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PaginatedStoragePathList> ApiStoragePathsGetAsync(bool? full_perms = null, int? id = null, System.Collections.Generic.IEnumerable<int>? id__in = null, string? name__icontains = null, string? name__iendswith = null, string? name__iexact = null, string? name__istartswith = null, string? ordering = null, int? page = null, int? page_size = null, string? path__icontains = null, string? path__iendswith = null, string? path__iexact = null, string? path__istartswith = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/storage_paths/"
                    urlBuilder_.Append("api/storage_paths/");
                    urlBuilder_.Append('?');
                    if (full_perms != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("full_perms")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(full_perms, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id__in != null)
                    {
                        bool isAfterFirst = false;
                        foreach (var item_ in id__in)
                        {
                            if (!isAfterFirst)
                            {
                                urlBuilder_.Append(System.Uri.EscapeDataString("id__in")).Append('=');
                            }
                            urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append(',');
                            isAfterFirst = true;
                        }
                        if (isAfterFirst)
                        {
                            urlBuilder_.Length--;
                            urlBuilder_.Append('&');
                        }
                    }
                    if (name__icontains != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name__icontains")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name__icontains, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name__iendswith != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name__iendswith")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name__iendswith, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name__iexact != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name__iexact")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name__iexact, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name__istartswith != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name__istartswith")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name__istartswith, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (ordering != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("ordering")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ordering, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page_size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (path__icontains != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("path__icontains")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(path__icontains, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (path__iendswith != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("path__iendswith")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(path__iendswith, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (path__iexact != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("path__iexact")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(path__iexact, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (path__istartswith != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("path__istartswith")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(path__istartswith, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PaginatedStoragePathList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<StoragePath> ApiStoragePathsPostAsync(StoragePathRequest body, string? name = null, string? path = null, string? match = null, MatchingAlgorithm? matching_algorithm = null, bool? is_insensitive = null, int? owner = null, Set_permissions11? set_permissions = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/storage_paths/"
                    urlBuilder_.Append("api/storage_paths/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StoragePath>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Speicherpfad identifiziert.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<StoragePath> ApiStoragePathsGetAsync(int id, bool? full_perms = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/storage_paths/{id}/"
                    urlBuilder_.Append("api/storage_paths/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append('?');
                    if (full_perms != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("full_perms")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(full_perms, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StoragePath>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Speicherpfad identifiziert.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<StoragePath> ApiStoragePathsPutAsync(int id, StoragePathRequest body, string? name = null, string? path = null, string? match = null, MatchingAlgorithm? matching_algorithm = null, bool? is_insensitive = null, int? owner = null, Set_permissions11? set_permissions = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/storage_paths/{id}/"
                    urlBuilder_.Append("api/storage_paths/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StoragePath>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Speicherpfad identifiziert.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<StoragePath> ApiStoragePathsPatchAsync(int id, PatchedStoragePathRequest? body = null, string? name = null, string? path = null, string? match = null, MatchingAlgorithm? matching_algorithm = null, bool? is_insensitive = null, int? owner = null, Set_permissions12? set_permissions = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/storage_paths/{id}/"
                    urlBuilder_.Append("api/storage_paths/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StoragePath>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// When a storage path is deleted, see if documents
        /// <br/>using it require a rename/move
        /// </remarks>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Speicherpfad identifiziert.</param>
        /// <returns>No response body</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ApiStoragePathsDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/storage_paths/{id}/"
                    urlBuilder_.Append("api/storage_paths/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Test storage path against a document
        /// </remarks>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<StoragePath> ApiStoragePathsTestAsync(StoragePathRequest body, string? name = null, string? path = null, string? match = null, MatchingAlgorithm? matching_algorithm = null, bool? is_insensitive = null, int? owner = null, Set_permissions11? set_permissions = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/storage_paths/test/"
                    urlBuilder_.Append("api/storage_paths/test/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<StoragePath>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id__in">Mehrere Werte können durch Kommas getrennt sein.</param>
        /// <param name="ordering">Feld, das zum Sortieren der Ergebnisse verwendet werden soll.</param>
        /// <param name="page">Eine Seitenzahl in der paginierten Ergebnismenge.</param>
        /// <param name="page_size">Anzahl der pro Seite zurückzugebenden Ergebnisse.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PaginatedTagList> ApiTagsGetAsync(bool? full_perms = null, int? id = null, System.Collections.Generic.IEnumerable<int>? id__in = null, string? name__icontains = null, string? name__iendswith = null, string? name__iexact = null, string? name__istartswith = null, string? ordering = null, int? page = null, int? page_size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/tags/"
                    urlBuilder_.Append("api/tags/");
                    urlBuilder_.Append('?');
                    if (full_perms != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("full_perms")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(full_perms, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (id__in != null)
                    {
                        bool isAfterFirst = false;
                        foreach (var item_ in id__in)
                        {
                            if (!isAfterFirst)
                            {
                                urlBuilder_.Append(System.Uri.EscapeDataString("id__in")).Append('=');
                            }
                            urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append(',');
                            isAfterFirst = true;
                        }
                        if (isAfterFirst)
                        {
                            urlBuilder_.Length--;
                            urlBuilder_.Append('&');
                        }
                    }
                    if (name__icontains != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name__icontains")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name__icontains, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name__iendswith != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name__iendswith")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name__iendswith, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name__iexact != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name__iexact")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name__iexact, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (name__istartswith != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("name__istartswith")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(name__istartswith, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (ordering != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("ordering")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ordering, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page_size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PaginatedTagList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="is_inbox_tag">Markiert das Tag als Posteingangs-Tag. Neue Dokumente werden immer mit diesem Tag versehen.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Tag> ApiTagsPostAsync(TagRequest body, string? name = null, string? color = null, string? match = null, MatchingAlgorithm? matching_algorithm = null, bool? is_insensitive = null, bool? is_inbox_tag = null, int? owner = null, Set_permissions13? set_permissions = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/tags/"
                    urlBuilder_.Append("api/tags/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Tag>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Tag identifiziert.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Tag> ApiTagsGetAsync(int id, bool? full_perms = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/tags/{id}/"
                    urlBuilder_.Append("api/tags/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append('?');
                    if (full_perms != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("full_perms")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(full_perms, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Tag>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Tag identifiziert.</param>
        /// <param name="is_inbox_tag">Markiert das Tag als Posteingangs-Tag. Neue Dokumente werden immer mit diesem Tag versehen.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Tag> ApiTagsPutAsync(int id, TagRequest body, string? name = null, string? color = null, string? match = null, MatchingAlgorithm? matching_algorithm = null, bool? is_insensitive = null, bool? is_inbox_tag = null, int? owner = null, Set_permissions13? set_permissions = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/tags/{id}/"
                    urlBuilder_.Append("api/tags/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Tag>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Tag identifiziert.</param>
        /// <param name="is_inbox_tag">Markiert das Tag als Posteingangs-Tag. Neue Dokumente werden immer mit diesem Tag versehen.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Tag> ApiTagsPatchAsync(int id, PatchedTagRequest? body = null, string? name = null, string? color = null, string? match = null, MatchingAlgorithm? matching_algorithm = null, bool? is_insensitive = null, bool? is_inbox_tag = null, int? owner = null, Set_permissions14? set_permissions = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/tags/{id}/"
                    urlBuilder_.Append("api/tags/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Tag>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Tag identifiziert.</param>
        /// <returns>No response body</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ApiTagsDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/tags/{id}/"
                    urlBuilder_.Append("api/tags/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="acknowledged">Acknowledged</param>
        /// <param name="ordering">Feld, das zum Sortieren der Ergebnisse verwendet werden soll.</param>
        /// <param name="status">Aktueller Status der laufenden Aufgabe
        /// <br/>
        /// <br/>* `FAILURE` - FAILURE
        /// <br/>* `PENDING` - PENDING
        /// <br/>* `RECEIVED` - RECEIVED
        /// <br/>* `RETRY` - RETRY
        /// <br/>* `REVOKED` - REVOKED
        /// <br/>* `STARTED` - STARTED
        /// <br/>* `SUCCESS` - SUCCESS</param>
        /// <param name="task_id">Filter tasks by Celery UUID</param>
        /// <param name="task_name">Name der ausgeführten Aufgabe
        /// <br/>
        /// <br/>* `consume_file` - Datei verarbeiten
        /// <br/>* `train_classifier` - Klassifikator trainieren
        /// <br/>* `check_sanity` - Plausibilität prüfen
        /// <br/>* `index_optimize` - Indexoptimierung</param>
        /// <param name="type">Art der ausgeführten Aufgabe
        /// <br/>
        /// <br/>* `auto_task` - Automatische Aufgabe
        /// <br/>* `scheduled_task` - Geplante Aufgabe
        /// <br/>* `manual_task` - Manuelle Aufgabe</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TasksView>> ApiTasksGetAsync(bool? acknowledged = null, string? ordering = null, Aufgabenstatus? status = null, string? task_id = null, Aufgabenname? task_name = null, Aufgabentyp? type = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/tasks/"
                    urlBuilder_.Append("api/tasks/");
                    urlBuilder_.Append('?');
                    if (acknowledged != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("acknowledged")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(acknowledged, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (ordering != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("ordering")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ordering, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (status != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("status")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(status, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (task_id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("task_id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(task_id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (task_name != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("task_name")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(task_name, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (type != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("type")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(type, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<TasksView>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der paperless task identifiziert.</param>
        /// <param name="task_id">Filter tasks by Celery UUID</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TasksView> ApiTasksGetAsync(int id, string? task_id = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/tasks/{id}/"
                    urlBuilder_.Append("api/tasks/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');
                    urlBuilder_.Append('?');
                    if (task_id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("task_id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(task_id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TasksView>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Acknowledge a list of tasks
        /// </remarks>
        /// <param name="task_id">Filter tasks by Celery UUID</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<AcknowledgeTasks> ApiTasksAcknowledgeAsync(string? task_id = null, Body3? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/tasks/acknowledge/"
                    urlBuilder_.Append("api/tasks/acknowledge/");
                    urlBuilder_.Append('?');
                    if (task_id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("task_id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(task_id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<AcknowledgeTasks>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            string responseText_ = ( response_.Content == null ) ? string.Empty : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("No response body", status_, responseText_, headers_, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="task_id">Filter tasks by Celery UUID</param>
        /// <param name="task_id">Celery-ID für die ausgeführte Aufgabe</param>
        /// <param name="task_name">Name der ausgeführten Aufgabe
        /// <br/>
        /// <br/>* `consume_file` - Datei verarbeiten
        /// <br/>* `train_classifier` - Klassifikator trainieren
        /// <br/>* `check_sanity` - Plausibilität prüfen
        /// <br/>* `index_optimize` - Indexoptimierung</param>
        /// <param name="task_file_name">Name der Datei, für die die Aufgabe ausgeführt wurde</param>
        /// <param name="date_created">Zeitpunkt, an dem das Ergebnis der Aufgabe erstellt wurde (in UTC)</param>
        /// <param name="date_done">Zeitpunkt, an dem die Aufgabe abgeschlossen wurde (in UTC)</param>
        /// <param name="type">Art der ausgeführten Aufgabe
        /// <br/>
        /// <br/>* `auto_task` - Automatische Aufgabe
        /// <br/>* `scheduled_task` - Geplante Aufgabe
        /// <br/>* `manual_task` - Manuelle Aufgabe</param>
        /// <param name="status">Aktueller Status der laufenden Aufgabe
        /// <br/>
        /// <br/>* `FAILURE` - FAILURE
        /// <br/>* `PENDING` - PENDING
        /// <br/>* `RECEIVED` - RECEIVED
        /// <br/>* `RETRY` - RETRY
        /// <br/>* `REVOKED` - REVOKED
        /// <br/>* `STARTED` - STARTED
        /// <br/>* `SUCCESS` - SUCCESS</param>
        /// <param name="result">Die von der Aufgabe zurückgegebenen Daten</param>
        /// <param name="acknowledged">Wenn die Aufgabe über die Benutzeroberfläche oder die API bestätigt wird</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<TasksView> ApiTasksRunAsync(TasksViewRequest body, string? task_id = null, string? task_id = null, TaskNameEnum? task_name = null, string? task_file_name = null, System.DateTimeOffset? date_created = null, System.DateTimeOffset? date_done = null, TasksViewTypeEnum? type = null, StatusEnum? status = null, string? result = null, bool? acknowledged = null, int? owner = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/tasks/run/"
                    urlBuilder_.Append("api/tasks/run/");
                    urlBuilder_.Append('?');
                    if (task_id != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("task_id")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(task_id, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<TasksView>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PaperlessAuthToken> ApiTokenAsync(PaperlessAuthTokenRequest body, string? username = null, string? password = null, string? code = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/x-www-form-urlencoded");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/token/"
                    urlBuilder_.Append("api/token/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PaperlessAuthToken>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="page">Eine Seitenzahl in der paginierten Ergebnismenge.</param>
        /// <param name="page_size">Anzahl der pro Seite zurückzugebenden Ergebnisse.</param>
        /// <returns>No response body</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ApiTrashGetAsync(int? page = null, int? page_size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/trash/"
                    urlBuilder_.Append("api/trash/");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page_size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>No response body</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ApiTrashPostAsync(TrashRequest body, System.Collections.Generic.IEnumerable<int>? documents = null, TrashActionEnum? action = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/trash/"
                    urlBuilder_.Append("api/trash/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UiSettingsView> ApiUiSettingsGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/ui_settings/"
                    urlBuilder_.Append("api/ui_settings/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UiSettingsView>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<UiSettingsView> ApiUiSettingsPostAsync(UiSettingsViewRequest? body = null, System.Collections.Generic.IDictionary<string, object>? settings = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/ui_settings/"
                    urlBuilder_.Append("api/ui_settings/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<UiSettingsView>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="ordering">Feld, das zum Sortieren der Ergebnisse verwendet werden soll.</param>
        /// <param name="page">Eine Seitenzahl in der paginierten Ergebnismenge.</param>
        /// <param name="page_size">Anzahl der pro Seite zurückzugebenden Ergebnisse.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PaginatedUserList> ApiUsersGetAsync(string? ordering = null, int? page = null, int? page_size = null, string? username__icontains = null, string? username__iendswith = null, string? username__iexact = null, string? username__istartswith = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/users/"
                    urlBuilder_.Append("api/users/");
                    urlBuilder_.Append('?');
                    if (ordering != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("ordering")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(ordering, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page_size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (username__icontains != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("username__icontains")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(username__icontains, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (username__iendswith != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("username__iendswith")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(username__iendswith, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (username__iexact != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("username__iexact")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(username__iexact, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (username__istartswith != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("username__istartswith")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(username__istartswith, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PaginatedUserList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="username">Erforderlich. 150 Zeichen oder weniger. Nur Buchstaben, Ziffern und @/./+/-/_.</param>
        /// <param name="is_staff">Legt fest, ob sich der Benutzer an der Administrationsseite anmelden kann.</param>
        /// <param name="is_active">Legt fest, ob dieser Benutzer aktiv ist. Kann deaktiviert werden, anstatt Benutzer zu löschen.</param>
        /// <param name="is_superuser">Legt fest, dass der Benutzer alle Berechtigungen hat, ohne diese einzeln zuweisen zu müssen.</param>
        /// <param name="groups">Die Gruppen, denen der Benutzer angehört. Ein Benutzer bekommt alle Berechtigungen dieser Gruppen.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<User> ApiUsersPostAsync(UserRequest body, string? username = null, string? email = null, string? password = null, string? first_name = null, string? last_name = null, System.DateTimeOffset? date_joined = null, bool? is_staff = null, bool? is_active = null, bool? is_superuser = null, System.Collections.Generic.IEnumerable<int>? groups = null, System.Collections.Generic.IEnumerable<string>? user_permissions = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/users/"
                    urlBuilder_.Append("api/users/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<User>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Benutzer identifiziert.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<User> ApiUsersGetAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/users/{id}/"
                    urlBuilder_.Append("api/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<User>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Benutzer identifiziert.</param>
        /// <param name="username">Erforderlich. 150 Zeichen oder weniger. Nur Buchstaben, Ziffern und @/./+/-/_.</param>
        /// <param name="is_staff">Legt fest, ob sich der Benutzer an der Administrationsseite anmelden kann.</param>
        /// <param name="is_active">Legt fest, ob dieser Benutzer aktiv ist. Kann deaktiviert werden, anstatt Benutzer zu löschen.</param>
        /// <param name="is_superuser">Legt fest, dass der Benutzer alle Berechtigungen hat, ohne diese einzeln zuweisen zu müssen.</param>
        /// <param name="groups">Die Gruppen, denen der Benutzer angehört. Ein Benutzer bekommt alle Berechtigungen dieser Gruppen.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<User> ApiUsersPutAsync(int id, UserRequest body, string? username = null, string? email = null, string? password = null, string? first_name = null, string? last_name = null, System.DateTimeOffset? date_joined = null, bool? is_staff = null, bool? is_active = null, bool? is_superuser = null, System.Collections.Generic.IEnumerable<int>? groups = null, System.Collections.Generic.IEnumerable<string>? user_permissions = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/users/{id}/"
                    urlBuilder_.Append("api/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<User>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Benutzer identifiziert.</param>
        /// <param name="username">Erforderlich. 150 Zeichen oder weniger. Nur Buchstaben, Ziffern und @/./+/-/_.</param>
        /// <param name="is_staff">Legt fest, ob sich der Benutzer an der Administrationsseite anmelden kann.</param>
        /// <param name="is_active">Legt fest, ob dieser Benutzer aktiv ist. Kann deaktiviert werden, anstatt Benutzer zu löschen.</param>
        /// <param name="is_superuser">Legt fest, dass der Benutzer alle Berechtigungen hat, ohne diese einzeln zuweisen zu müssen.</param>
        /// <param name="groups">Die Gruppen, denen der Benutzer angehört. Ein Benutzer bekommt alle Berechtigungen dieser Gruppen.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<User> ApiUsersPatchAsync(int id, PatchedUserRequest? body = null, string? username = null, string? email = null, string? password = null, string? first_name = null, string? last_name = null, System.DateTimeOffset? date_joined = null, bool? is_staff = null, bool? is_active = null, bool? is_superuser = null, System.Collections.Generic.IEnumerable<int>? groups = null, System.Collections.Generic.IEnumerable<string>? user_permissions = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/users/{id}/"
                    urlBuilder_.Append("api/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<User>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Benutzer identifiziert.</param>
        /// <returns>No response body</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ApiUsersDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/users/{id}/"
                    urlBuilder_.Append("api/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Benutzer identifiziert.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<bool> ApiUsersDeactivateTotpAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/users/{id}/deactivate_totp/"
                    urlBuilder_.Append("api/users/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append("/deactivate_totp/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<bool>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<string>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<string>("A server side error occurred.", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="page">Eine Seitenzahl in der paginierten Ergebnismenge.</param>
        /// <param name="page_size">Anzahl der pro Seite zurückzugebenden Ergebnisse.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PaginatedWorkflowActionList> ApiWorkflowActionsGetAsync(int? page = null, int? page_size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/workflow_actions/"
                    urlBuilder_.Append("api/workflow_actions/");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page_size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PaginatedWorkflowActionList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="assign_title">Weisen Sie einen Dokumententitel zu. Dieser kann Platzhalter beinhalten, siehe Dokumentation.</param>
        /// <param name="assign_custom_fields_values">Optionale Werte, die den benutzerdefinierten Feldern zugewiesen werden.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<WorkflowAction> ApiWorkflowActionsPostAsync(WorkflowActionRequest? body = null, int? id = null, WorkflowActionTypeEnum? type = null, string? assign_title = null, System.Collections.Generic.IEnumerable<int?>? assign_tags = null, int? assign_correspondent = null, int? assign_document_type = null, int? assign_storage_path = null, int? assign_owner = null, System.Collections.Generic.IEnumerable<int>? assign_view_users = null, System.Collections.Generic.IEnumerable<int>? assign_view_groups = null, System.Collections.Generic.IEnumerable<int>? assign_change_users = null, System.Collections.Generic.IEnumerable<int>? assign_change_groups = null, System.Collections.Generic.IEnumerable<int>? assign_custom_fields = null, object? assign_custom_fields_values = null, bool? remove_all_tags = null, System.Collections.Generic.IEnumerable<int>? remove_tags = null, bool? remove_all_correspondents = null, System.Collections.Generic.IEnumerable<int>? remove_correspondents = null, bool? remove_all_document_types = null, System.Collections.Generic.IEnumerable<int>? remove_document_types = null, bool? remove_all_storage_paths = null, System.Collections.Generic.IEnumerable<int>? remove_storage_paths = null, System.Collections.Generic.IEnumerable<int>? remove_custom_fields = null, bool? remove_all_custom_fields = null, bool? remove_all_owners = null, System.Collections.Generic.IEnumerable<int>? remove_owners = null, bool? remove_all_permissions = null, System.Collections.Generic.IEnumerable<int>? remove_view_users = null, System.Collections.Generic.IEnumerable<int>? remove_view_groups = null, System.Collections.Generic.IEnumerable<int>? remove_change_users = null, System.Collections.Generic.IEnumerable<int>? remove_change_groups = null, WorkflowActionEmailRequest? email = null, WorkflowActionWebhookRequest? webhook = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/workflow_actions/"
                    urlBuilder_.Append("api/workflow_actions/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<WorkflowAction>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Workflow-Aktion identifiziert.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<WorkflowAction> ApiWorkflowActionsGetAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/workflow_actions/{id}/"
                    urlBuilder_.Append("api/workflow_actions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<WorkflowAction>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Workflow-Aktion identifiziert.</param>
        /// <param name="assign_title">Weisen Sie einen Dokumententitel zu. Dieser kann Platzhalter beinhalten, siehe Dokumentation.</param>
        /// <param name="assign_custom_fields_values">Optionale Werte, die den benutzerdefinierten Feldern zugewiesen werden.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<WorkflowAction> ApiWorkflowActionsPutAsync(int id, WorkflowActionRequest? body = null, int? id = null, WorkflowActionTypeEnum? type = null, string? assign_title = null, System.Collections.Generic.IEnumerable<int?>? assign_tags = null, int? assign_correspondent = null, int? assign_document_type = null, int? assign_storage_path = null, int? assign_owner = null, System.Collections.Generic.IEnumerable<int>? assign_view_users = null, System.Collections.Generic.IEnumerable<int>? assign_view_groups = null, System.Collections.Generic.IEnumerable<int>? assign_change_users = null, System.Collections.Generic.IEnumerable<int>? assign_change_groups = null, System.Collections.Generic.IEnumerable<int>? assign_custom_fields = null, object? assign_custom_fields_values = null, bool? remove_all_tags = null, System.Collections.Generic.IEnumerable<int>? remove_tags = null, bool? remove_all_correspondents = null, System.Collections.Generic.IEnumerable<int>? remove_correspondents = null, bool? remove_all_document_types = null, System.Collections.Generic.IEnumerable<int>? remove_document_types = null, bool? remove_all_storage_paths = null, System.Collections.Generic.IEnumerable<int>? remove_storage_paths = null, System.Collections.Generic.IEnumerable<int>? remove_custom_fields = null, bool? remove_all_custom_fields = null, bool? remove_all_owners = null, System.Collections.Generic.IEnumerable<int>? remove_owners = null, bool? remove_all_permissions = null, System.Collections.Generic.IEnumerable<int>? remove_view_users = null, System.Collections.Generic.IEnumerable<int>? remove_view_groups = null, System.Collections.Generic.IEnumerable<int>? remove_change_users = null, System.Collections.Generic.IEnumerable<int>? remove_change_groups = null, WorkflowActionEmailRequest? email = null, WorkflowActionWebhookRequest? webhook = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/workflow_actions/{id}/"
                    urlBuilder_.Append("api/workflow_actions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<WorkflowAction>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Workflow-Aktion identifiziert.</param>
        /// <param name="assign_title">Weisen Sie einen Dokumententitel zu. Dieser kann Platzhalter beinhalten, siehe Dokumentation.</param>
        /// <param name="assign_custom_fields_values">Optionale Werte, die den benutzerdefinierten Feldern zugewiesen werden.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<WorkflowAction> ApiWorkflowActionsPatchAsync(int id, PatchedWorkflowActionRequest? body = null, int? id = null, WorkflowActionTypeEnum? type = null, string? assign_title = null, System.Collections.Generic.IEnumerable<int?>? assign_tags = null, int? assign_correspondent = null, int? assign_document_type = null, int? assign_storage_path = null, int? assign_owner = null, System.Collections.Generic.IEnumerable<int>? assign_view_users = null, System.Collections.Generic.IEnumerable<int>? assign_view_groups = null, System.Collections.Generic.IEnumerable<int>? assign_change_users = null, System.Collections.Generic.IEnumerable<int>? assign_change_groups = null, System.Collections.Generic.IEnumerable<int>? assign_custom_fields = null, object? assign_custom_fields_values = null, bool? remove_all_tags = null, System.Collections.Generic.IEnumerable<int>? remove_tags = null, bool? remove_all_correspondents = null, System.Collections.Generic.IEnumerable<int>? remove_correspondents = null, bool? remove_all_document_types = null, System.Collections.Generic.IEnumerable<int>? remove_document_types = null, bool? remove_all_storage_paths = null, System.Collections.Generic.IEnumerable<int>? remove_storage_paths = null, System.Collections.Generic.IEnumerable<int>? remove_custom_fields = null, bool? remove_all_custom_fields = null, bool? remove_all_owners = null, System.Collections.Generic.IEnumerable<int>? remove_owners = null, bool? remove_all_permissions = null, System.Collections.Generic.IEnumerable<int>? remove_view_users = null, System.Collections.Generic.IEnumerable<int>? remove_view_groups = null, System.Collections.Generic.IEnumerable<int>? remove_change_users = null, System.Collections.Generic.IEnumerable<int>? remove_change_groups = null, WorkflowActionEmailRequest? email = null, WorkflowActionWebhookRequest? webhook = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/workflow_actions/{id}/"
                    urlBuilder_.Append("api/workflow_actions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<WorkflowAction>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Workflow-Aktion identifiziert.</param>
        /// <returns>No response body</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ApiWorkflowActionsDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/workflow_actions/{id}/"
                    urlBuilder_.Append("api/workflow_actions/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="page">Eine Seitenzahl in der paginierten Ergebnismenge.</param>
        /// <param name="page_size">Anzahl der pro Seite zurückzugebenden Ergebnisse.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PaginatedWorkflowTriggerList> ApiWorkflowTriggersGetAsync(int? page = null, int? page_size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/workflow_triggers/"
                    urlBuilder_.Append("api/workflow_triggers/");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page_size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PaginatedWorkflowTriggerList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="filter_path">Nur Dokumente, die mit diesem Pfad (falls angegeben) übereinstimmen, verarbeiten. Platzhalter wie * sind erlaubt. Groß- und Kleinschreibung wird nicht beachtet.</param>
        /// <param name="filter_filename">Nur Dokumente, die vollständig mit diesem Dateinamen (falls angegeben) übereinstimmen, verarbeiten. Platzhalter wie *.pdf oder *rechnung* sind erlaubt. Groß- und Kleinschreibung wird nicht beachtet.</param>
        /// <param name="schedule_offset_days">Die Anzahl der Tage, um die der Zeitplanauslöser verschoben werden soll.</param>
        /// <param name="schedule_is_recurring">Ob der Zeitplan wiederholt werden soll.</param>
        /// <param name="schedule_recurring_interval_days">Die Anzahl der Tage zwischen wiederkehrenden Zeitplanauslösern.</param>
        /// <param name="schedule_date_field">Das zu prüfende Feld für einen Zeitplanauslöser.
        /// <br/>
        /// <br/>* `added` - Hinzugefügt
        /// <br/>* `created` - Ausgestellt
        /// <br/>* `modified` - Geändert
        /// <br/>* `custom_field` - Benutzerdefiniertes Feld</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<WorkflowTrigger> ApiWorkflowTriggersPostAsync(WorkflowTriggerRequest body, int? id = null, System.Collections.Generic.IEnumerable<SourcesEnum>? sources = null, WorkflowTriggerTypeEnum? type = null, string? filter_path = null, string? filter_filename = null, int? filter_mailrule = null, WorkflowTriggerMatchingAlgorithmEnum? matching_algorithm = null, string? match = null, bool? is_insensitive = null, System.Collections.Generic.IEnumerable<int>? filter_has_tags = null, int? filter_has_correspondent = null, int? filter_has_document_type = null, int? schedule_offset_days = null, bool? schedule_is_recurring = null, int? schedule_recurring_interval_days = null, ScheduleDateFieldEnum? schedule_date_field = null, int? schedule_date_custom_field = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/workflow_triggers/"
                    urlBuilder_.Append("api/workflow_triggers/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<WorkflowTrigger>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Arbeitsablauf-Auslöser identifiziert.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<WorkflowTrigger> ApiWorkflowTriggersGetAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/workflow_triggers/{id}/"
                    urlBuilder_.Append("api/workflow_triggers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<WorkflowTrigger>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Arbeitsablauf-Auslöser identifiziert.</param>
        /// <param name="filter_path">Nur Dokumente, die mit diesem Pfad (falls angegeben) übereinstimmen, verarbeiten. Platzhalter wie * sind erlaubt. Groß- und Kleinschreibung wird nicht beachtet.</param>
        /// <param name="filter_filename">Nur Dokumente, die vollständig mit diesem Dateinamen (falls angegeben) übereinstimmen, verarbeiten. Platzhalter wie *.pdf oder *rechnung* sind erlaubt. Groß- und Kleinschreibung wird nicht beachtet.</param>
        /// <param name="schedule_offset_days">Die Anzahl der Tage, um die der Zeitplanauslöser verschoben werden soll.</param>
        /// <param name="schedule_is_recurring">Ob der Zeitplan wiederholt werden soll.</param>
        /// <param name="schedule_recurring_interval_days">Die Anzahl der Tage zwischen wiederkehrenden Zeitplanauslösern.</param>
        /// <param name="schedule_date_field">Das zu prüfende Feld für einen Zeitplanauslöser.
        /// <br/>
        /// <br/>* `added` - Hinzugefügt
        /// <br/>* `created` - Ausgestellt
        /// <br/>* `modified` - Geändert
        /// <br/>* `custom_field` - Benutzerdefiniertes Feld</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<WorkflowTrigger> ApiWorkflowTriggersPutAsync(int id, WorkflowTriggerRequest body, int? id = null, System.Collections.Generic.IEnumerable<SourcesEnum>? sources = null, WorkflowTriggerTypeEnum? type = null, string? filter_path = null, string? filter_filename = null, int? filter_mailrule = null, WorkflowTriggerMatchingAlgorithmEnum? matching_algorithm = null, string? match = null, bool? is_insensitive = null, System.Collections.Generic.IEnumerable<int>? filter_has_tags = null, int? filter_has_correspondent = null, int? filter_has_document_type = null, int? schedule_offset_days = null, bool? schedule_is_recurring = null, int? schedule_recurring_interval_days = null, ScheduleDateFieldEnum? schedule_date_field = null, int? schedule_date_custom_field = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/workflow_triggers/{id}/"
                    urlBuilder_.Append("api/workflow_triggers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<WorkflowTrigger>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Arbeitsablauf-Auslöser identifiziert.</param>
        /// <param name="filter_path">Nur Dokumente, die mit diesem Pfad (falls angegeben) übereinstimmen, verarbeiten. Platzhalter wie * sind erlaubt. Groß- und Kleinschreibung wird nicht beachtet.</param>
        /// <param name="filter_filename">Nur Dokumente, die vollständig mit diesem Dateinamen (falls angegeben) übereinstimmen, verarbeiten. Platzhalter wie *.pdf oder *rechnung* sind erlaubt. Groß- und Kleinschreibung wird nicht beachtet.</param>
        /// <param name="schedule_offset_days">Die Anzahl der Tage, um die der Zeitplanauslöser verschoben werden soll.</param>
        /// <param name="schedule_is_recurring">Ob der Zeitplan wiederholt werden soll.</param>
        /// <param name="schedule_recurring_interval_days">Die Anzahl der Tage zwischen wiederkehrenden Zeitplanauslösern.</param>
        /// <param name="schedule_date_field">Das zu prüfende Feld für einen Zeitplanauslöser.
        /// <br/>
        /// <br/>* `added` - Hinzugefügt
        /// <br/>* `created` - Ausgestellt
        /// <br/>* `modified` - Geändert
        /// <br/>* `custom_field` - Benutzerdefiniertes Feld</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<WorkflowTrigger> ApiWorkflowTriggersPatchAsync(int id, PatchedWorkflowTriggerRequest? body = null, int? id = null, System.Collections.Generic.IEnumerable<SourcesEnum>? sources = null, WorkflowTriggerTypeEnum? type = null, string? filter_path = null, string? filter_filename = null, int? filter_mailrule = null, WorkflowTriggerMatchingAlgorithmEnum? matching_algorithm = null, string? match = null, bool? is_insensitive = null, System.Collections.Generic.IEnumerable<int>? filter_has_tags = null, int? filter_has_correspondent = null, int? filter_has_document_type = null, int? schedule_offset_days = null, bool? schedule_is_recurring = null, int? schedule_recurring_interval_days = null, ScheduleDateFieldEnum? schedule_date_field = null, int? schedule_date_custom_field = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/workflow_triggers/{id}/"
                    urlBuilder_.Append("api/workflow_triggers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<WorkflowTrigger>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der Arbeitsablauf-Auslöser identifiziert.</param>
        /// <returns>No response body</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ApiWorkflowTriggersDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/workflow_triggers/{id}/"
                    urlBuilder_.Append("api/workflow_triggers/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="page">Eine Seitenzahl in der paginierten Ergebnismenge.</param>
        /// <param name="page_size">Anzahl der pro Seite zurückzugebenden Ergebnisse.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PaginatedWorkflowList> ApiWorkflowsGetAsync(int? page = null, int? page_size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/workflows/"
                    urlBuilder_.Append("api/workflows/");
                    urlBuilder_.Append('?');
                    if (page != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    if (page_size != null)
                    {
                        urlBuilder_.Append(System.Uri.EscapeDataString("page_size")).Append('=').Append(System.Uri.EscapeDataString(ConvertToString(page_size, System.Globalization.CultureInfo.InvariantCulture))).Append('&');
                    }
                    urlBuilder_.Length--;

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PaginatedWorkflowList>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Workflow> ApiWorkflowsPostAsync(WorkflowRequest body, string? name = null, int? order = null, bool? enabled = null, System.Collections.Generic.IEnumerable<WorkflowTriggerRequest>? triggers = null, System.Collections.Generic.IEnumerable<WorkflowActionRequest>? actions = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/workflows/"
                    urlBuilder_.Append("api/workflows/");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Workflow>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der workflow identifiziert.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Workflow> ApiWorkflowsGetAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/workflows/{id}/"
                    urlBuilder_.Append("api/workflows/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Workflow>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der workflow identifiziert.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Workflow> ApiWorkflowsPutAsync(int id, WorkflowRequest body, string? name = null, int? order = null, bool? enabled = null, System.Collections.Generic.IEnumerable<WorkflowTriggerRequest>? triggers = null, System.Collections.Generic.IEnumerable<WorkflowActionRequest>? actions = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/workflows/{id}/"
                    urlBuilder_.Append("api/workflows/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Workflow>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der workflow identifiziert.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<Workflow> ApiWorkflowsPatchAsync(int id, PatchedWorkflowRequest? body = null, string? name = null, int? order = null, bool? enabled = null, System.Collections.Generic.IEnumerable<WorkflowTriggerRequest>? triggers = null, System.Collections.Generic.IEnumerable<WorkflowActionRequest>? actions = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var json_ = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(body, JsonSerializerSettings);
                    var content_ = new System.Net.Http.ByteArrayContent(json_);
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PATCH");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/workflows/{id}/"
                    urlBuilder_.Append("api/workflows/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Workflow>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">Ein eindeutiger Ganzzahl-Wert, der workflow identifiziert.</param>
        /// <returns>No response body</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task ApiWorkflowsDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            if (id == null)
                throw new System.ArgumentNullException("id");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    var urlBuilder_ = new System.Text.StringBuilder();
                    if (!string.IsNullOrEmpty(_baseUrl)) urlBuilder_.Append(_baseUrl);
                    // Operation Path: "api/workflows/{id}/"
                    urlBuilder_.Append("api/workflows/");
                    urlBuilder_.Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));
                    urlBuilder_.Append('/');

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>>();
                        foreach (var item_ in response_.Headers)
                            headers_[item_.Key] = item_.Value;
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await ReadAsStringAsync(response_.Content, cancellationToken).ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<string> ReadAsStringAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStringAsync(cancellationToken);
    #else
            return content.ReadAsStringAsync();
    #endif
        }

        [System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        private static System.Threading.Tasks.Task<System.IO.Stream> ReadAsStreamAsync(System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken)
        {
    #if NET5_0_OR_GREATER
            return content.ReadAsStreamAsync(cancellationToken);
    #else
            return content.ReadAsStreamAsync();
    #endif
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T)!, string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await ReadAsStringAsync(response.Content, cancellationToken).ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody!, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await ReadAsStreamAsync(response.Content, cancellationToken).ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody!, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object? value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value is string[])
            {
                return string.Join(",", (string[])value);
            }
            else if (value.GetType().IsArray)
            {
                var valueArray = (System.Array)value;
                var valueTextArray = new string[valueArray.Length];
                for (var i = 0; i < valueArray.Length; i++)
                {
                    valueTextArray[i] = ConvertToString(valueArray.GetValue(i), cultureInfo);
                }
                return string.Join(",", valueTextArray);
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>
    /// * `1` - IMAP
    /// <br/>* `2` - Gmail-OAuth
    /// <br/>* `3` - Outlook-OAuth
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AccountTypeEnum
    {

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AcknowledgeTasks
    {

        [System.Text.Json.Serialization.JsonPropertyName("result")]
        public int Result { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Actor
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("username")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Username { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationConfiguration
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("user_args")]
        public object? User_args { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("barcode_tag_mapping")]
        public object? Barcode_tag_mapping { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("output_type")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter<OutputTypeEnum>))]
        public OutputTypeEnum? Output_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pages")]
        [System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
        public int? Pages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("language")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? Language { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mode")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter<ModeEnum>))]
        public ModeEnum? Mode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("skip_archive_file")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter<SkipArchiveFileEnum>))]
        public SkipArchiveFileEnum? Skip_archive_file { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("image_dpi")]
        [System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
        public int? Image_dpi { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unpaper_clean")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter<UnpaperCleanEnum>))]
        public UnpaperCleanEnum? Unpaper_clean { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("deskew")]
        public bool? Deskew { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("rotate_pages")]
        public bool? Rotate_pages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("rotate_pages_threshold")]
        [System.ComponentModel.DataAnnotations.Range(0.0D, double.MaxValue)]
        public double? Rotate_pages_threshold { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("max_image_pixels")]
        [System.ComponentModel.DataAnnotations.Range(0.0D, double.MaxValue)]
        public double? Max_image_pixels { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("color_conversion_strategy")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter<ColorConversionStrategyEnum>))]
        public ColorConversionStrategyEnum? Color_conversion_strategy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("app_title")]
        [System.ComponentModel.DataAnnotations.StringLength(48)]
        public string? App_title { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("app_logo")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"(?:jpg|png|gif|svg)$")]
        public System.Uri? App_logo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("barcodes_enabled")]
        public bool? Barcodes_enabled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("barcode_enable_tiff_support")]
        public bool? Barcode_enable_tiff_support { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("barcode_string")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? Barcode_string { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("barcode_retain_split_pages")]
        public bool? Barcode_retain_split_pages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("barcode_enable_asn")]
        public bool? Barcode_enable_asn { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("barcode_asn_prefix")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? Barcode_asn_prefix { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("barcode_upscale")]
        [System.ComponentModel.DataAnnotations.Range(1.0D, double.MaxValue)]
        public double? Barcode_upscale { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("barcode_dpi")]
        [System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
        public int? Barcode_dpi { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("barcode_max_pages")]
        [System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
        public int? Barcode_max_pages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("barcode_enable_tag")]
        public bool? Barcode_enable_tag { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApplicationConfigurationRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("user_args")]
        public object? User_args { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("barcode_tag_mapping")]
        public object? Barcode_tag_mapping { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("output_type")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter<OutputTypeEnum>))]
        public OutputTypeEnum? Output_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pages")]
        [System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
        public int? Pages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("language")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? Language { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mode")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter<ModeEnum>))]
        public ModeEnum? Mode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("skip_archive_file")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter<SkipArchiveFileEnum>))]
        public SkipArchiveFileEnum? Skip_archive_file { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("image_dpi")]
        [System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
        public int? Image_dpi { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unpaper_clean")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter<UnpaperCleanEnum>))]
        public UnpaperCleanEnum? Unpaper_clean { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("deskew")]
        public bool? Deskew { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("rotate_pages")]
        public bool? Rotate_pages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("rotate_pages_threshold")]
        [System.ComponentModel.DataAnnotations.Range(0.0D, double.MaxValue)]
        public double? Rotate_pages_threshold { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("max_image_pixels")]
        [System.ComponentModel.DataAnnotations.Range(0.0D, double.MaxValue)]
        public double? Max_image_pixels { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("color_conversion_strategy")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter<ColorConversionStrategyEnum>))]
        public ColorConversionStrategyEnum? Color_conversion_strategy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("app_title")]
        [System.ComponentModel.DataAnnotations.StringLength(48)]
        public string? App_title { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("app_logo")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"(?:jpg|png|gif|svg)$")]
        public byte[]? App_logo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("barcodes_enabled")]
        public bool? Barcodes_enabled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("barcode_enable_tiff_support")]
        public bool? Barcode_enable_tiff_support { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("barcode_string")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? Barcode_string { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("barcode_retain_split_pages")]
        public bool? Barcode_retain_split_pages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("barcode_enable_asn")]
        public bool? Barcode_enable_asn { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("barcode_asn_prefix")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? Barcode_asn_prefix { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("barcode_upscale")]
        [System.ComponentModel.DataAnnotations.Range(1.0D, double.MaxValue)]
        public double? Barcode_upscale { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("barcode_dpi")]
        [System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
        public int? Barcode_dpi { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("barcode_max_pages")]
        [System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
        public int? Barcode_max_pages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("barcode_enable_tag")]
        public bool? Barcode_enable_tag { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// * `1` - Keinen Korrespondenten zuweisen
    /// <br/>* `2` - E-Mail-Adresse verwenden
    /// <br/>* `3` - Absendername verwenden (oder E-Mail-Adresse, wenn nicht verfügbar)
    /// <br/>* `4` - Nachfolgend ausgewählten Korrespondent verwenden
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AssignCorrespondentFromEnum
    {

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

    }

    /// <summary>
    /// * `1` - Betreff als Titel verwenden
    /// <br/>* `2` - Dateiname des Anhangs als Titel verwenden
    /// <br/>* `3` - Titel nicht aus Regel zuweisen
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AssignTitleFromEnum
    {

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    /// <summary>
    /// * `1` - Nur Anhänge verarbeiten.
    /// <br/>* `2` - Alle Dateien verarbeiten, auch 'inline'-Anhänge.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AttachmentTypeEnum
    {

        _1 = 1,

        _2 = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BasicUser
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; } = default!;

        /// <summary>
        /// Erforderlich. 150 Zeichen oder weniger. Nur Buchstaben, Ziffern und @/./+/-/_.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("username")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(150)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[\w.@+-]+$")]
        public string Username { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("first_name")]
        [System.ComponentModel.DataAnnotations.StringLength(150)]
        public string? First_name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("last_name")]
        [System.ComponentModel.DataAnnotations.StringLength(150)]
        public string? Last_name { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BasicUserRequest
    {

        /// <summary>
        /// Erforderlich. 150 Zeichen oder weniger. Nur Buchstaben, Ziffern und @/./+/-/_.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("username")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(150, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[\w.@+-]+$")]
        public string Username { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("first_name")]
        [System.ComponentModel.DataAnnotations.StringLength(150)]
        public string? First_name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("last_name")]
        [System.ComponentModel.DataAnnotations.StringLength(150)]
        public string? Last_name { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BlankEnum
    {

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"")]
        Empty = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BulkDownload
    {

        [System.Text.Json.Serialization.JsonPropertyName("content")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter<ContentEnum>))]
        public ContentEnum? Content { get; set; } = Paperless.Client.Gen.ContentEnum.Archive;

        [System.Text.Json.Serialization.JsonPropertyName("compression")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter<CompressionEnum>))]
        public CompressionEnum? Compression { get; set; } = Paperless.Client.Gen.CompressionEnum.None;

        [System.Text.Json.Serialization.JsonPropertyName("follow_formatting")]
        public bool? Follow_formatting { get; set; } = false;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BulkDownloadRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("documents")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<int> Documents { get; set; } = new System.Collections.ObjectModel.Collection<int>();

        [System.Text.Json.Serialization.JsonPropertyName("content")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter<ContentEnum>))]
        public ContentEnum? Content { get; set; } = Paperless.Client.Gen.ContentEnum.Archive;

        [System.Text.Json.Serialization.JsonPropertyName("compression")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter<CompressionEnum>))]
        public CompressionEnum? Compression { get; set; } = Paperless.Client.Gen.CompressionEnum.None;

        [System.Text.Json.Serialization.JsonPropertyName("follow_formatting")]
        public bool? Follow_formatting { get; set; } = false;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BulkEditDocumentsResult
    {

        [System.Text.Json.Serialization.JsonPropertyName("result")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Result { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BulkEditObjectsRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("objects")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<int> Objects { get; set; } = new System.Collections.ObjectModel.Collection<int>();

        [System.Text.Json.Serialization.JsonPropertyName("object_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter<ObjectTypeEnum>))]
        public ObjectTypeEnum Object_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("operation")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter<OperationEnum>))]
        public OperationEnum Operation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("owner")]
        public int? Owner { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("permissions")]
        public System.Collections.Generic.IDictionary<string, object>? Permissions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("merge")]
        public bool? Merge { get; set; } = false;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BulkEditRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("documents")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<int> Documents { get; set; } = new System.Collections.ObjectModel.Collection<int>();

        [System.Text.Json.Serialization.JsonPropertyName("method")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter<MethodEnum>))]
        public MethodEnum Method { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("parameters")]
        public System.Collections.Generic.IDictionary<string, object>? Parameters { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BulkEditResult
    {

        [System.Text.Json.Serialization.JsonPropertyName("result")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Result { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Classifier
    {

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("error")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Error { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("last_trained")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Last_trained { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// * `LeaveColorUnchanged` - LeaveColorUnchanged
    /// <br/>* `RGB` - RGB
    /// <br/>* `UseDeviceIndependentColor` - UseDeviceIndependentColor
    /// <br/>* `Gray` - Grau
    /// <br/>* `CMYK` - CMYK
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ColorConversionStrategyEnum
    {

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"LeaveColorUnchanged")]
        LeaveColorUnchanged = 0,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"RGB")]
        RGB = 1,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"UseDeviceIndependentColor")]
        UseDeviceIndependentColor = 2,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"Gray")]
        Gray = 3,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"CMYK")]
        CMYK = 4,

    }

    /// <summary>
    /// * `none` - none
    /// <br/>* `deflated` - deflated
    /// <br/>* `bzip2` - bzip2
    /// <br/>* `lzma` - lzma
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CompressionEnum
    {

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"none")]
        None = 0,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"deflated")]
        Deflated = 1,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"bzip2")]
        Bzip2 = 2,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"lzma")]
        Lzma = 3,

    }

    /// <summary>
    /// * `1` - Nur Anhänge verarbeiten.
    /// <br/>* `2` - Vollständige E-Mail (mit eingebetteten Anhängen in der Datei) als .eml verarbeiten
    /// <br/>* `3` - Vollständige Mail (mit eingebetteten Anhängen in der Datei) als .eml verarbeiten + Anhänge als separate Dokumente verarbeiten
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ConsumptionScopeEnum
    {

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    /// <summary>
    /// * `archive` - archive
    /// <br/>* `originals` - originals
    /// <br/>* `both` - both
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ContentEnum
    {

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"archive")]
        Archive = 0,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"originals")]
        Originals = 1,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"both")]
        Both = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Correspondent
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("slug")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Slug { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("match")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string? Match { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("matching_algorithm")]
        public MatchingAlgorithm? Matching_algorithm { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("is_insensitive")]
        public bool? Is_insensitive { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("document_count")]
        public int Document_count { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("last_correspondence")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Last_correspondence { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("owner")]
        public int? Owner { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("permissions")]
        [System.ComponentModel.DataAnnotations.Required]
        public Permissions Permissions { get; set; } = new Permissions();

        [System.Text.Json.Serialization.JsonPropertyName("user_can_change")]
        public bool User_can_change { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CorrespondentCounts
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("document_count")]
        public int Document_count { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CorrespondentRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("match")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string? Match { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("matching_algorithm")]
        public MatchingAlgorithm? Matching_algorithm { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("is_insensitive")]
        public bool? Is_insensitive { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("owner")]
        public int? Owner { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("set_permissions")]
        public Set_permissions? Set_permissions { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomField
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("data_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter<DataTypeEnum>))]
        public DataTypeEnum Data_type { get; set; } = default!;

        /// <summary>
        /// Zusätzliche Daten für das benutzerdefinierte Feld, z. B. Auswahloptionen
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("extra_data")]
        public object? Extra_data { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("document_count")]
        public int Document_count { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomFieldCounts
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("document_count")]
        public int Document_count { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomFieldInstance
    {

        /// <summary>
        /// Given the *incoming* primitive data, return the value for this field
        /// <br/>that should be validated and transformed to a native value.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public string? Value { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("field")]
        public int Field { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomFieldInstanceRequest
    {

        /// <summary>
        /// Given the *incoming* primitive data, return the value for this field
        /// <br/>that should be validated and transformed to a native value.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public string? Value { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("field")]
        public int Field { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomFieldRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("data_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter<DataTypeEnum>))]
        public DataTypeEnum Data_type { get; set; } = default!;

        /// <summary>
        /// Zusätzliche Daten für das benutzerdefinierte Feld, z. B. Auswahloptionen
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("extra_data")]
        public object? Extra_data { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// * `string` - string
    /// <br/>* `url` - url
    /// <br/>* `date` - date
    /// <br/>* `boolean` - boolean
    /// <br/>* `integer` - integer
    /// <br/>* `float` - float
    /// <br/>* `monetary` - monetary
    /// <br/>* `documentlink` - documentlink
    /// <br/>* `select` - select
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DataTypeEnum
    {

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"string")]
        String = 0,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"url")]
        Url = 1,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"date")]
        Date = 2,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"boolean")]
        Boolean = 3,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"integer")]
        Integer = 4,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"float")]
        Float = 5,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"monetary")]
        Monetary = 6,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"documentlink")]
        Documentlink = 7,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"select")]
        Select = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Database
    {

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("url")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Url { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("error")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Error { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("migration_status")]
        [System.ComponentModel.DataAnnotations.Required]
        public MigrationStatus Migration_status { get; set; } = new MigrationStatus();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// * `table` - Tabelle
    /// <br/>* `smallCards` - Kleine Karten
    /// <br/>* `largeCards` - Große Karten
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DisplayModeEnum
    {

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"table")]
        Table = 0,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"smallCards")]
        SmallCards = 1,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"largeCards")]
        LargeCards = 2,

    }

    /// <summary>
    /// Adds update nested feature
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Document
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("correspondent")]
        public int? Correspondent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("document_type")]
        public int? Document_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("storage_path")]
        public int? Storage_path { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string? Title { get; set; } = default!;

        /// <summary>
        /// Der Inhalt des Dokuments in Textform. Dieses Feld wird primär für die Suche verwendet.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("content")]
        public string? Content { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("tags")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<int> Tags { get; set; } = new System.Collections.ObjectModel.Collection<int>();

        [System.Text.Json.Serialization.JsonPropertyName("created")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Created { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("created_date")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        [System.Obsolete]
        public System.DateTimeOffset? Created_date { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("modified")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Modified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("added")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Added { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("deleted_at")]
        public System.DateTimeOffset? Deleted_at { get; set; } = default!;

        /// <summary>
        /// Die Position dieses Dokuments in Ihrem physischen Dokumentenarchiv.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("archive_serial_number")]
        [System.ComponentModel.DataAnnotations.Range(0L, 4294967295L)]
        public long? Archive_serial_number { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("original_file_name")]
        public string? Original_file_name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("archived_file_name")]
        public string? Archived_file_name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("owner")]
        public int? Owner { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("permissions")]
        [System.ComponentModel.DataAnnotations.Required]
        public Permissions2 Permissions { get; set; } = new Permissions2();

        [System.Text.Json.Serialization.JsonPropertyName("user_can_change")]
        public bool User_can_change { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("is_shared_by_requester")]
        public bool Is_shared_by_requester { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notes")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Notes> Notes { get; set; } = new System.Collections.ObjectModel.Collection<Notes>();

        [System.Text.Json.Serialization.JsonPropertyName("custom_fields")]
        public System.Collections.Generic.ICollection<CustomFieldInstance>? Custom_fields { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page_count")]
        public int? Page_count { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mime_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Mime_type { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DocumentListRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("documents")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<int> Documents { get; set; } = new System.Collections.ObjectModel.Collection<int>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Adds update nested feature
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DocumentRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("correspondent")]
        public int? Correspondent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("document_type")]
        public int? Document_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("storage_path")]
        public int? Storage_path { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string? Title { get; set; } = default!;

        /// <summary>
        /// Der Inhalt des Dokuments in Textform. Dieses Feld wird primär für die Suche verwendet.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("content")]
        public string? Content { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("tags")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<int> Tags { get; set; } = new System.Collections.ObjectModel.Collection<int>();

        [System.Text.Json.Serialization.JsonPropertyName("created")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Created { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("created_date")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        [System.Obsolete]
        public System.DateTimeOffset? Created_date { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("deleted_at")]
        public System.DateTimeOffset? Deleted_at { get; set; } = default!;

        /// <summary>
        /// Die Position dieses Dokuments in Ihrem physischen Dokumentenarchiv.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("archive_serial_number")]
        [System.ComponentModel.DataAnnotations.Range(0L, 4294967295L)]
        public long? Archive_serial_number { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("owner")]
        public int? Owner { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("set_permissions")]
        public Set_permissions5? Set_permissions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("custom_fields")]
        public System.Collections.Generic.ICollection<CustomFieldInstanceRequest>? Custom_fields { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remove_inbox_tags")]
        public bool? Remove_inbox_tags { get; set; } = false;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DocumentType
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("slug")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Slug { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("match")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string? Match { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("matching_algorithm")]
        public MatchingAlgorithm? Matching_algorithm { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("is_insensitive")]
        public bool? Is_insensitive { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("document_count")]
        public int Document_count { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("owner")]
        public int? Owner { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("permissions")]
        [System.ComponentModel.DataAnnotations.Required]
        public Permissions3 Permissions { get; set; } = new Permissions3();

        [System.Text.Json.Serialization.JsonPropertyName("user_can_change")]
        public bool User_can_change { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DocumentTypeCounts
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("document_count")]
        public int Document_count { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DocumentTypeRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("match")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string? Match { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("matching_algorithm")]
        public MatchingAlgorithm? Matching_algorithm { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("is_insensitive")]
        public bool? Is_insensitive { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("owner")]
        public int? Owner { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("set_permissions")]
        public Set_permissions3? Set_permissions { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmailRequestRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("addresses")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Addresses { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("subject")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Subject { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Message { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("use_archive_version")]
        public bool? Use_archive_version { get; set; } = true;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EmailResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// * `archive` - Archiv
    /// <br/>* `original` - Original
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FileVersionEnum
    {

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"archive")]
        Archive = 0,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"original")]
        Original = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Group
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(150)]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("permissions")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Permissions { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GroupRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(150, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("permissions")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Permissions { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// * `1` - Keine Verschlüsselung
    /// <br/>* `2` - SSL verwenden
    /// <br/>* `3` - STARTTLS verwenden
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ImapSecurityEnum
    {

        _1 = 1,

        _2 = 2,

        _3 = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Index
    {

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("error")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Error { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("last_modified")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Last_modified { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LogEntry
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("timestamp")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Timestamp { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("action")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Action { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("changes")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, object> Changes { get; set; } = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonPropertyName("actor")]
        [System.ComponentModel.DataAnnotations.Required]
        public Actor Actor { get; set; } = new Actor();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MailAccount
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("imap_server")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string Imap_server { get; set; } = default!;

        /// <summary>
        /// Dies ist in der Regel 143 für unverschlüsselte und STARTTLS-Verbindungen und 993 für SSL-Verbindungen.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("imap_port")]
        [System.ComponentModel.DataAnnotations.Range(-2147483648, 2147483647)]
        public int? Imap_port { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("imap_security")]
        public ImapSecurityEnum? Imap_security { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("username")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string Username { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("password")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Password { get; set; } = default!;

        /// <summary>
        /// Der Zeichensatz, der bei der Kommunikation mit dem E-Mail-Server verwendet werden soll, wie z. B. „UTF-8“ oder „US-ASCII“.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("character_set")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string? Character_set { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("is_token")]
        public bool? Is_token { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("owner")]
        public int? Owner { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("user_can_change")]
        public bool User_can_change { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("account_type")]
        public AccountTypeEnum? Account_type { get; set; } = default!;

        /// <summary>
        /// Das Ablaufdatum des Aktualisierungstokens. 
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiration")]
        public System.DateTimeOffset? Expiration { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MailAccountProcessResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("result")]
        public string? Result { get; set; } = "OK";

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MailAccountRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("imap_server")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string Imap_server { get; set; } = default!;

        /// <summary>
        /// Dies ist in der Regel 143 für unverschlüsselte und STARTTLS-Verbindungen und 993 für SSL-Verbindungen.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("imap_port")]
        [System.ComponentModel.DataAnnotations.Range(-2147483648, 2147483647)]
        public int? Imap_port { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("imap_security")]
        public ImapSecurityEnum? Imap_security { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("username")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string Username { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("password")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Password { get; set; } = default!;

        /// <summary>
        /// Der Zeichensatz, der bei der Kommunikation mit dem E-Mail-Server verwendet werden soll, wie z. B. „UTF-8“ oder „US-ASCII“.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("character_set")]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string? Character_set { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("is_token")]
        public bool? Is_token { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("owner")]
        public int? Owner { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("set_permissions")]
        public Set_permissions7? Set_permissions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("account_type")]
        public AccountTypeEnum? Account_type { get; set; } = default!;

        /// <summary>
        /// Das Ablaufdatum des Aktualisierungstokens. 
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiration")]
        public System.DateTimeOffset? Expiration { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MailAccountTestResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("success")]
        public bool Success { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MailRule
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("account")]
        public int Account { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("enabled")]
        public bool? Enabled { get; set; } = default!;

        /// <summary>
        /// Unterordner müssen durch ein Trennzeichen, oft einen Punkt („.“) oder einen Schrägstrich („/“), getrennt werden. Dies variiert jedoch je nach Mailserver.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("folder")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string? Folder { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("filter_from")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string? Filter_from { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("filter_to")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string? Filter_to { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("filter_subject")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string? Filter_subject { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("filter_body")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string? Filter_body { get; set; } = default!;

        /// <summary>
        /// Nur Dokumente, die vollständig mit diesem Dateinamen (falls angegeben) übereinstimmen, verarbeiten. Platzhalter wie *.pdf oder *rechnung* sind erlaubt. Groß- und Kleinschreibung wird nicht beachtet.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("filter_attachment_filename_include")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string? Filter_attachment_filename_include { get; set; } = default!;

        /// <summary>
        /// Dokumente, die vollständig mit diesem Dateinamen (falls angegeben) übereinstimmen, nicht verarbeiten. Platzhalter wie *.pdf oder *rechnung* sind erlaubt. Groß- und Kleinschreibung wird nicht beachtet.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("filter_attachment_filename_exclude")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string? Filter_attachment_filename_exclude { get; set; } = default!;

        /// <summary>
        /// Angegeben in Tagen.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("maximum_age")]
        [System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
        public int? Maximum_age { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("action")]
        public MailRuleActionEnum? Action { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("action_parameter")]
        public string? Action_parameter { get; set; } = "";

        [System.Text.Json.Serialization.JsonPropertyName("assign_title_from")]
        public AssignTitleFromEnum? Assign_title_from { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assign_tags")]
        public System.Collections.Generic.ICollection<int?>? Assign_tags { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assign_correspondent_from")]
        public AssignCorrespondentFromEnum? Assign_correspondent_from { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assign_correspondent")]
        public int? Assign_correspondent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assign_document_type")]
        public int? Assign_document_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assign_owner_from_rule")]
        public bool? Assign_owner_from_rule { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("order")]
        public int? Order { get; set; } = default!;

        /// <summary>
        /// „Inline“-Anhänge schließen eingebettete Bilder mit ein, daher sollte diese Einstellung mit einem Dateinamenfilter kombiniert werden.
        /// <br/>
        /// <br/>* `1` - Nur Anhänge verarbeiten.
        /// <br/>* `2` - Alle Dateien verarbeiten, auch 'inline'-Anhänge.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("attachment_type")]
        public AttachmentTypeEnum? Attachment_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("consumption_scope")]
        public ConsumptionScopeEnum? Consumption_scope { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pdf_layout")]
        public PdfLayoutEnum? Pdf_layout { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("owner")]
        public int? Owner { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("user_can_change")]
        public bool User_can_change { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// * `1` - Löschen
    /// <br/>* `2` - In angegebenen Ordner verschieben
    /// <br/>* `3` - Als gelesen markieren, gelesene E-Mails nicht verarbeiten
    /// <br/>* `4` - Als wichtig markieren, markierte E-Mails nicht verarbeiten
    /// <br/>* `5` - Markiere die E-Mail mit dem angegebenen Tag, verarbeite markierte E-Mails nicht
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MailRuleActionEnum
    {

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MailRuleRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("account")]
        public int Account { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("enabled")]
        public bool? Enabled { get; set; } = default!;

        /// <summary>
        /// Unterordner müssen durch ein Trennzeichen, oft einen Punkt („.“) oder einen Schrägstrich („/“), getrennt werden. Dies variiert jedoch je nach Mailserver.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("folder")]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string? Folder { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("filter_from")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string? Filter_from { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("filter_to")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string? Filter_to { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("filter_subject")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string? Filter_subject { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("filter_body")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string? Filter_body { get; set; } = default!;

        /// <summary>
        /// Nur Dokumente, die vollständig mit diesem Dateinamen (falls angegeben) übereinstimmen, verarbeiten. Platzhalter wie *.pdf oder *rechnung* sind erlaubt. Groß- und Kleinschreibung wird nicht beachtet.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("filter_attachment_filename_include")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string? Filter_attachment_filename_include { get; set; } = default!;

        /// <summary>
        /// Dokumente, die vollständig mit diesem Dateinamen (falls angegeben) übereinstimmen, nicht verarbeiten. Platzhalter wie *.pdf oder *rechnung* sind erlaubt. Groß- und Kleinschreibung wird nicht beachtet.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("filter_attachment_filename_exclude")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string? Filter_attachment_filename_exclude { get; set; } = default!;

        /// <summary>
        /// Angegeben in Tagen.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("maximum_age")]
        [System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
        public int? Maximum_age { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("action")]
        public MailRuleActionEnum? Action { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("action_parameter")]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string? Action_parameter { get; set; } = "";

        [System.Text.Json.Serialization.JsonPropertyName("assign_title_from")]
        public AssignTitleFromEnum? Assign_title_from { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assign_tags")]
        public System.Collections.Generic.ICollection<int?>? Assign_tags { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assign_correspondent_from")]
        public AssignCorrespondentFromEnum? Assign_correspondent_from { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assign_correspondent")]
        public int? Assign_correspondent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assign_document_type")]
        public int? Assign_document_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assign_owner_from_rule")]
        public bool? Assign_owner_from_rule { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("order")]
        public int? Order { get; set; } = default!;

        /// <summary>
        /// „Inline“-Anhänge schließen eingebettete Bilder mit ein, daher sollte diese Einstellung mit einem Dateinamenfilter kombiniert werden.
        /// <br/>
        /// <br/>* `1` - Nur Anhänge verarbeiten.
        /// <br/>* `2` - Alle Dateien verarbeiten, auch 'inline'-Anhänge.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("attachment_type")]
        public AttachmentTypeEnum? Attachment_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("consumption_scope")]
        public ConsumptionScopeEnum? Consumption_scope { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pdf_layout")]
        public PdfLayoutEnum? Pdf_layout { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("owner")]
        public int? Owner { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("set_permissions")]
        public Set_permissions9? Set_permissions { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// * `0` - Keiner
    /// <br/>* `1` - Irgendein Wort
    /// <br/>* `2` - Alle Wörter
    /// <br/>* `3` - Exakte Übereinstimmung
    /// <br/>* `4` - Regulärer Ausdruck
    /// <br/>* `5` - Ungenaues Wort
    /// <br/>* `6` - Automatisch
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MatchingAlgorithm
    {

        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Metadata
    {

        [System.Text.Json.Serialization.JsonPropertyName("original_checksum")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Original_checksum { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("original_size")]
        public int Original_size { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("original_mime_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Original_mime_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("media_filename")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Media_filename { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("has_archive_version")]
        public bool Has_archive_version { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("original_metadata")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, object> Original_metadata { get; set; } = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonPropertyName("archive_checksum")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Archive_checksum { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("archive_media_filename")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Archive_media_filename { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("original_filename")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Original_filename { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("archive_size")]
        public int Archive_size { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("archive_metadata")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, object> Archive_metadata { get; set; } = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonPropertyName("lang")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Lang { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// * `set_correspondent` - set_correspondent
    /// <br/>* `set_document_type` - set_document_type
    /// <br/>* `set_storage_path` - set_storage_path
    /// <br/>* `add_tag` - add_tag
    /// <br/>* `remove_tag` - remove_tag
    /// <br/>* `modify_tags` - modify_tags
    /// <br/>* `modify_custom_fields` - modify_custom_fields
    /// <br/>* `delete` - delete
    /// <br/>* `reprocess` - reprocess
    /// <br/>* `set_permissions` - set_permissions
    /// <br/>* `rotate` - rotate
    /// <br/>* `merge` - merge
    /// <br/>* `split` - split
    /// <br/>* `delete_pages` - delete_pages
    /// <br/>* `edit_pdf` - edit_pdf
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum MethodEnum
    {

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"set_correspondent")]
        Set_correspondent = 0,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"set_document_type")]
        Set_document_type = 1,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"set_storage_path")]
        Set_storage_path = 2,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"add_tag")]
        Add_tag = 3,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"remove_tag")]
        Remove_tag = 4,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"modify_tags")]
        Modify_tags = 5,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"modify_custom_fields")]
        Modify_custom_fields = 6,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"delete")]
        Delete = 7,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"reprocess")]
        Reprocess = 8,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"set_permissions")]
        Set_permissions = 9,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"rotate")]
        Rotate = 10,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"merge")]
        Merge = 11,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"split")]
        Split = 12,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"delete_pages")]
        Delete_pages = 13,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"edit_pdf")]
        Edit_pdf = 14,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MigrationStatus
    {

        [System.Text.Json.Serialization.JsonPropertyName("latest_migration")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Latest_migration { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unapplied_migrations")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Unapplied_migrations { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// * `skip` - überspringen
    /// <br/>* `redo` - wiederholen
    /// <br/>* `force` - erzwingen
    /// <br/>* `skip_noarchive` - skip_noarchive
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ModeEnum
    {

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"skip")]
        Skip = 0,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"redo")]
        Redo = 1,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"force")]
        Force = 2,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"skip_noarchive")]
        Skip_noarchive = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NoteCreateRequestRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("note")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Note { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Notes
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; } = default!;

        /// <summary>
        /// Notiz für das Dokument
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("note")]
        public string? Note { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("created")]
        public System.DateTimeOffset? Created { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("user")]
        [System.ComponentModel.DataAnnotations.Required]
        public BasicUser User { get; set; } = new BasicUser();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NotesRequest
    {

        /// <summary>
        /// Notiz für das Dokument
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("note")]
        public string? Note { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("created")]
        public System.DateTimeOffset? Created { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum NullEnum
    {

    }

    /// <summary>
    /// * `tags` - tags
    /// <br/>* `correspondents` - correspondents
    /// <br/>* `document_types` - document_types
    /// <br/>* `storage_paths` - storage_paths
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ObjectTypeEnum
    {

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"tags")]
        Tags = 0,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"correspondents")]
        Correspondents = 1,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"document_types")]
        Document_types = 2,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"storage_paths")]
        Storage_paths = 3,

    }

    /// <summary>
    /// * `set_permissions` - set_permissions
    /// <br/>* `delete` - delete
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OperationEnum
    {

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"set_permissions")]
        Set_permissions = 0,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"delete")]
        Delete = 1,

    }

    /// <summary>
    /// * `pdf` - pdf
    /// <br/>* `pdfa` - pdfa
    /// <br/>* `pdfa-1` - pdfa-1
    /// <br/>* `pdfa-2` - pdfa-2
    /// <br/>* `pdfa-3` - pdfa-3
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum OutputTypeEnum
    {

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"pdf")]
        Pdf = 0,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"pdfa")]
        Pdfa = 1,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"pdfa-1")]
        Pdfa1 = 2,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"pdfa-2")]
        Pdfa2 = 3,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"pdfa-3")]
        Pdfa3 = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaginatedCorrespondentList
    {

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public int Count { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("next")]
        public System.Uri? Next { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("previous")]
        public System.Uri? Previous { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Correspondent> Results { get; set; } = new System.Collections.ObjectModel.Collection<Correspondent>();

        [System.Text.Json.Serialization.JsonPropertyName("all")]
        public System.Collections.Generic.ICollection<int>? All { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaginatedCustomFieldList
    {

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public int Count { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("next")]
        public System.Uri? Next { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("previous")]
        public System.Uri? Previous { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CustomField> Results { get; set; } = new System.Collections.ObjectModel.Collection<CustomField>();

        [System.Text.Json.Serialization.JsonPropertyName("all")]
        public System.Collections.Generic.ICollection<int>? All { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaginatedDocumentList
    {

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public int Count { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("next")]
        public System.Uri? Next { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("previous")]
        public System.Uri? Previous { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Document> Results { get; set; } = new System.Collections.ObjectModel.Collection<Document>();

        [System.Text.Json.Serialization.JsonPropertyName("all")]
        public System.Collections.Generic.ICollection<int>? All { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaginatedDocumentTypeList
    {

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public int Count { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("next")]
        public System.Uri? Next { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("previous")]
        public System.Uri? Previous { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<DocumentType> Results { get; set; } = new System.Collections.ObjectModel.Collection<DocumentType>();

        [System.Text.Json.Serialization.JsonPropertyName("all")]
        public System.Collections.Generic.ICollection<int>? All { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaginatedGroupList
    {

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public int Count { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("next")]
        public System.Uri? Next { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("previous")]
        public System.Uri? Previous { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Group> Results { get; set; } = new System.Collections.ObjectModel.Collection<Group>();

        [System.Text.Json.Serialization.JsonPropertyName("all")]
        public System.Collections.Generic.ICollection<int>? All { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaginatedLogEntryList
    {

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public int Count { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("next")]
        public System.Uri? Next { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("previous")]
        public System.Uri? Previous { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<LogEntry> Results { get; set; } = new System.Collections.ObjectModel.Collection<LogEntry>();

        [System.Text.Json.Serialization.JsonPropertyName("all")]
        public System.Collections.Generic.ICollection<int>? All { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaginatedMailAccountList
    {

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public int Count { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("next")]
        public System.Uri? Next { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("previous")]
        public System.Uri? Previous { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<MailAccount> Results { get; set; } = new System.Collections.ObjectModel.Collection<MailAccount>();

        [System.Text.Json.Serialization.JsonPropertyName("all")]
        public System.Collections.Generic.ICollection<int>? All { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaginatedMailRuleList
    {

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public int Count { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("next")]
        public System.Uri? Next { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("previous")]
        public System.Uri? Previous { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<MailRule> Results { get; set; } = new System.Collections.ObjectModel.Collection<MailRule>();

        [System.Text.Json.Serialization.JsonPropertyName("all")]
        public System.Collections.Generic.ICollection<int>? All { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaginatedNotesList
    {

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public int Count { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("next")]
        public System.Uri? Next { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("previous")]
        public System.Uri? Previous { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Notes> Results { get; set; } = new System.Collections.ObjectModel.Collection<Notes>();

        [System.Text.Json.Serialization.JsonPropertyName("all")]
        public System.Collections.Generic.ICollection<int>? All { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaginatedSavedViewList
    {

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public int Count { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("next")]
        public System.Uri? Next { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("previous")]
        public System.Uri? Previous { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SavedView> Results { get; set; } = new System.Collections.ObjectModel.Collection<SavedView>();

        [System.Text.Json.Serialization.JsonPropertyName("all")]
        public System.Collections.Generic.ICollection<int>? All { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaginatedShareLinkList
    {

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public int Count { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("next")]
        public System.Uri? Next { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("previous")]
        public System.Uri? Previous { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ShareLink> Results { get; set; } = new System.Collections.ObjectModel.Collection<ShareLink>();

        [System.Text.Json.Serialization.JsonPropertyName("all")]
        public System.Collections.Generic.ICollection<int>? All { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaginatedStoragePathList
    {

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public int Count { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("next")]
        public System.Uri? Next { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("previous")]
        public System.Uri? Previous { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<StoragePath> Results { get; set; } = new System.Collections.ObjectModel.Collection<StoragePath>();

        [System.Text.Json.Serialization.JsonPropertyName("all")]
        public System.Collections.Generic.ICollection<int>? All { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaginatedTagList
    {

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public int Count { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("next")]
        public System.Uri? Next { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("previous")]
        public System.Uri? Previous { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Tag> Results { get; set; } = new System.Collections.ObjectModel.Collection<Tag>();

        [System.Text.Json.Serialization.JsonPropertyName("all")]
        public System.Collections.Generic.ICollection<int>? All { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaginatedUserList
    {

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public int Count { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("next")]
        public System.Uri? Next { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("previous")]
        public System.Uri? Previous { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<User> Results { get; set; } = new System.Collections.ObjectModel.Collection<User>();

        [System.Text.Json.Serialization.JsonPropertyName("all")]
        public System.Collections.Generic.ICollection<int>? All { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaginatedWorkflowActionList
    {

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public int Count { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("next")]
        public System.Uri? Next { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("previous")]
        public System.Uri? Previous { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<WorkflowAction> Results { get; set; } = new System.Collections.ObjectModel.Collection<WorkflowAction>();

        [System.Text.Json.Serialization.JsonPropertyName("all")]
        public System.Collections.Generic.ICollection<int>? All { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaginatedWorkflowList
    {

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public int Count { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("next")]
        public System.Uri? Next { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("previous")]
        public System.Uri? Previous { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Workflow> Results { get; set; } = new System.Collections.ObjectModel.Collection<Workflow>();

        [System.Text.Json.Serialization.JsonPropertyName("all")]
        public System.Collections.Generic.ICollection<int>? All { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaginatedWorkflowTriggerList
    {

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public int Count { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("next")]
        public System.Uri? Next { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("previous")]
        public System.Uri? Previous { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<WorkflowTrigger> Results { get; set; } = new System.Collections.ObjectModel.Collection<WorkflowTrigger>();

        [System.Text.Json.Serialization.JsonPropertyName("all")]
        public System.Collections.Generic.ICollection<int>? All { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaperlessAuthToken
    {

        [System.Text.Json.Serialization.JsonPropertyName("token")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Token { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PaperlessAuthTokenRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("username")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Username { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("password")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Password { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string? Code { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatchedApplicationConfigurationRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("user_args")]
        public object? User_args { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("barcode_tag_mapping")]
        public object? Barcode_tag_mapping { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("output_type")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter<OutputTypeEnum>))]
        public OutputTypeEnum? Output_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pages")]
        [System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
        public int? Pages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("language")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? Language { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mode")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter<ModeEnum>))]
        public ModeEnum? Mode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("skip_archive_file")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter<SkipArchiveFileEnum>))]
        public SkipArchiveFileEnum? Skip_archive_file { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("image_dpi")]
        [System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
        public int? Image_dpi { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unpaper_clean")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter<UnpaperCleanEnum>))]
        public UnpaperCleanEnum? Unpaper_clean { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("deskew")]
        public bool? Deskew { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("rotate_pages")]
        public bool? Rotate_pages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("rotate_pages_threshold")]
        [System.ComponentModel.DataAnnotations.Range(0.0D, double.MaxValue)]
        public double? Rotate_pages_threshold { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("max_image_pixels")]
        [System.ComponentModel.DataAnnotations.Range(0.0D, double.MaxValue)]
        public double? Max_image_pixels { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("color_conversion_strategy")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter<ColorConversionStrategyEnum>))]
        public ColorConversionStrategyEnum? Color_conversion_strategy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("app_title")]
        [System.ComponentModel.DataAnnotations.StringLength(48)]
        public string? App_title { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("app_logo")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"(?:jpg|png|gif|svg)$")]
        public byte[]? App_logo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("barcodes_enabled")]
        public bool? Barcodes_enabled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("barcode_enable_tiff_support")]
        public bool? Barcode_enable_tiff_support { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("barcode_string")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? Barcode_string { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("barcode_retain_split_pages")]
        public bool? Barcode_retain_split_pages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("barcode_enable_asn")]
        public bool? Barcode_enable_asn { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("barcode_asn_prefix")]
        [System.ComponentModel.DataAnnotations.StringLength(32)]
        public string? Barcode_asn_prefix { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("barcode_upscale")]
        [System.ComponentModel.DataAnnotations.Range(1.0D, double.MaxValue)]
        public double? Barcode_upscale { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("barcode_dpi")]
        [System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
        public int? Barcode_dpi { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("barcode_max_pages")]
        [System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
        public int? Barcode_max_pages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("barcode_enable_tag")]
        public bool? Barcode_enable_tag { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatchedCorrespondentRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("match")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string? Match { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("matching_algorithm")]
        public MatchingAlgorithm? Matching_algorithm { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("is_insensitive")]
        public bool? Is_insensitive { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("owner")]
        public int? Owner { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("set_permissions")]
        public Set_permissions2? Set_permissions { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatchedCustomFieldRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("data_type")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter<DataTypeEnum>))]
        public DataTypeEnum? Data_type { get; set; } = default!;

        /// <summary>
        /// Zusätzliche Daten für das benutzerdefinierte Feld, z. B. Auswahloptionen
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("extra_data")]
        public object? Extra_data { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Adds update nested feature
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatchedDocumentRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("correspondent")]
        public int? Correspondent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("document_type")]
        public int? Document_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("storage_path")]
        public int? Storage_path { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string? Title { get; set; } = default!;

        /// <summary>
        /// Der Inhalt des Dokuments in Textform. Dieses Feld wird primär für die Suche verwendet.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("content")]
        public string? Content { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("tags")]
        public System.Collections.Generic.ICollection<int>? Tags { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("created")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? Created { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("created_date")]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        [System.Obsolete]
        public System.DateTimeOffset? Created_date { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("deleted_at")]
        public System.DateTimeOffset? Deleted_at { get; set; } = default!;

        /// <summary>
        /// Die Position dieses Dokuments in Ihrem physischen Dokumentenarchiv.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("archive_serial_number")]
        [System.ComponentModel.DataAnnotations.Range(0L, 4294967295L)]
        public long? Archive_serial_number { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("owner")]
        public int? Owner { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("set_permissions")]
        public Set_permissions6? Set_permissions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("custom_fields")]
        public System.Collections.Generic.ICollection<CustomFieldInstanceRequest>? Custom_fields { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remove_inbox_tags")]
        public bool? Remove_inbox_tags { get; set; } = false;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatchedDocumentTypeRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("match")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string? Match { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("matching_algorithm")]
        public MatchingAlgorithm? Matching_algorithm { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("is_insensitive")]
        public bool? Is_insensitive { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("owner")]
        public int? Owner { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("set_permissions")]
        public Set_permissions4? Set_permissions { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatchedGroupRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.StringLength(150, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("permissions")]
        public System.Collections.Generic.ICollection<string>? Permissions { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatchedMailAccountRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("imap_server")]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string? Imap_server { get; set; } = default!;

        /// <summary>
        /// Dies ist in der Regel 143 für unverschlüsselte und STARTTLS-Verbindungen und 993 für SSL-Verbindungen.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("imap_port")]
        [System.ComponentModel.DataAnnotations.Range(-2147483648, 2147483647)]
        public int? Imap_port { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("imap_security")]
        public ImapSecurityEnum? Imap_security { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("username")]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string? Username { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("password")]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string? Password { get; set; } = default!;

        /// <summary>
        /// Der Zeichensatz, der bei der Kommunikation mit dem E-Mail-Server verwendet werden soll, wie z. B. „UTF-8“ oder „US-ASCII“.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("character_set")]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string? Character_set { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("is_token")]
        public bool? Is_token { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("owner")]
        public int? Owner { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("set_permissions")]
        public Set_permissions8? Set_permissions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("account_type")]
        public AccountTypeEnum? Account_type { get; set; } = default!;

        /// <summary>
        /// Das Ablaufdatum des Aktualisierungstokens. 
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("expiration")]
        public System.DateTimeOffset? Expiration { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatchedMailRuleRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("account")]
        public int? Account { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("enabled")]
        public bool? Enabled { get; set; } = default!;

        /// <summary>
        /// Unterordner müssen durch ein Trennzeichen, oft einen Punkt („.“) oder einen Schrägstrich („/“), getrennt werden. Dies variiert jedoch je nach Mailserver.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("folder")]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string? Folder { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("filter_from")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string? Filter_from { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("filter_to")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string? Filter_to { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("filter_subject")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string? Filter_subject { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("filter_body")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string? Filter_body { get; set; } = default!;

        /// <summary>
        /// Nur Dokumente, die vollständig mit diesem Dateinamen (falls angegeben) übereinstimmen, verarbeiten. Platzhalter wie *.pdf oder *rechnung* sind erlaubt. Groß- und Kleinschreibung wird nicht beachtet.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("filter_attachment_filename_include")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string? Filter_attachment_filename_include { get; set; } = default!;

        /// <summary>
        /// Dokumente, die vollständig mit diesem Dateinamen (falls angegeben) übereinstimmen, nicht verarbeiten. Platzhalter wie *.pdf oder *rechnung* sind erlaubt. Groß- und Kleinschreibung wird nicht beachtet.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("filter_attachment_filename_exclude")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string? Filter_attachment_filename_exclude { get; set; } = default!;

        /// <summary>
        /// Angegeben in Tagen.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("maximum_age")]
        [System.ComponentModel.DataAnnotations.Range(0, 2147483647)]
        public int? Maximum_age { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("action")]
        public MailRuleActionEnum? Action { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("action_parameter")]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string? Action_parameter { get; set; } = "";

        [System.Text.Json.Serialization.JsonPropertyName("assign_title_from")]
        public AssignTitleFromEnum? Assign_title_from { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assign_tags")]
        public System.Collections.Generic.ICollection<int?>? Assign_tags { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assign_correspondent_from")]
        public AssignCorrespondentFromEnum? Assign_correspondent_from { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assign_correspondent")]
        public int? Assign_correspondent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assign_document_type")]
        public int? Assign_document_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assign_owner_from_rule")]
        public bool? Assign_owner_from_rule { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("order")]
        public int? Order { get; set; } = default!;

        /// <summary>
        /// „Inline“-Anhänge schließen eingebettete Bilder mit ein, daher sollte diese Einstellung mit einem Dateinamenfilter kombiniert werden.
        /// <br/>
        /// <br/>* `1` - Nur Anhänge verarbeiten.
        /// <br/>* `2` - Alle Dateien verarbeiten, auch 'inline'-Anhänge.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("attachment_type")]
        public AttachmentTypeEnum? Attachment_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("consumption_scope")]
        public ConsumptionScopeEnum? Consumption_scope { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pdf_layout")]
        public PdfLayoutEnum? Pdf_layout { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("owner")]
        public int? Owner { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("set_permissions")]
        public Set_permissions10? Set_permissions { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatchedProfileRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string? Email { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("password")]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string? Password { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("first_name")]
        [System.ComponentModel.DataAnnotations.StringLength(150)]
        public string? First_name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("last_name")]
        [System.ComponentModel.DataAnnotations.StringLength(150)]
        public string? Last_name { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatchedSavedViewRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("show_on_dashboard")]
        public bool? Show_on_dashboard { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("show_in_sidebar")]
        public bool? Show_in_sidebar { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sort_field")]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string? Sort_field { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sort_reverse")]
        public bool? Sort_reverse { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("filter_rules")]
        public System.Collections.Generic.ICollection<SavedViewFilterRuleRequest>? Filter_rules { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("page_size")]
        [System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
        public int? Page_size { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("display_mode")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter<DisplayModeEnum>))]
        public DisplayModeEnum? Display_mode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("display_fields")]
        public object? Display_fields { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("owner")]
        public int? Owner { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatchedShareLinkRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("expiration")]
        public System.DateTimeOffset? Expiration { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("document")]
        public int? Document { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("file_version")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter<FileVersionEnum>))]
        public FileVersionEnum? File_version { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatchedStoragePathRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("path")]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string? Path { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("match")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string? Match { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("matching_algorithm")]
        public MatchingAlgorithm? Matching_algorithm { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("is_insensitive")]
        public bool? Is_insensitive { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("owner")]
        public int? Owner { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("set_permissions")]
        public Set_permissions12? Set_permissions { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatchedTagRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("color")]
        [System.ComponentModel.DataAnnotations.StringLength(7, MinimumLength = 1)]
        public string? Color { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("match")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string? Match { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("matching_algorithm")]
        public MatchingAlgorithm? Matching_algorithm { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("is_insensitive")]
        public bool? Is_insensitive { get; set; } = default!;

        /// <summary>
        /// Markiert das Tag als Posteingangs-Tag. Neue Dokumente werden immer mit diesem Tag versehen.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("is_inbox_tag")]
        public bool? Is_inbox_tag { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("owner")]
        public int? Owner { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("set_permissions")]
        public Set_permissions14? Set_permissions { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatchedUserRequest
    {

        /// <summary>
        /// Erforderlich. 150 Zeichen oder weniger. Nur Buchstaben, Ziffern und @/./+/-/_.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("username")]
        [System.ComponentModel.DataAnnotations.StringLength(150, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[\w.@+-]+$")]
        public string? Username { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        [System.ComponentModel.DataAnnotations.StringLength(254)]
        public string? Email { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("password")]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string? Password { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("first_name")]
        [System.ComponentModel.DataAnnotations.StringLength(150)]
        public string? First_name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("last_name")]
        [System.ComponentModel.DataAnnotations.StringLength(150)]
        public string? Last_name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("date_joined")]
        public System.DateTimeOffset? Date_joined { get; set; } = default!;

        /// <summary>
        /// Legt fest, ob sich der Benutzer an der Administrationsseite anmelden kann.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("is_staff")]
        public bool? Is_staff { get; set; } = default!;

        /// <summary>
        /// Legt fest, ob dieser Benutzer aktiv ist. Kann deaktiviert werden, anstatt Benutzer zu löschen.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("is_active")]
        public bool? Is_active { get; set; } = default!;

        /// <summary>
        /// Legt fest, dass der Benutzer alle Berechtigungen hat, ohne diese einzeln zuweisen zu müssen.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("is_superuser")]
        public bool? Is_superuser { get; set; } = default!;

        /// <summary>
        /// Die Gruppen, denen der Benutzer angehört. Ein Benutzer bekommt alle Berechtigungen dieser Gruppen.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("groups")]
        public System.Collections.Generic.ICollection<int>? Groups { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("user_permissions")]
        public System.Collections.Generic.ICollection<string>? User_permissions { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatchedWorkflowActionRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public WorkflowActionTypeEnum? Type { get; set; } = default!;

        /// <summary>
        /// Weisen Sie einen Dokumententitel zu. Dieser kann Platzhalter beinhalten, siehe Dokumentation.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("assign_title")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string? Assign_title { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assign_tags")]
        public System.Collections.Generic.ICollection<int?>? Assign_tags { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assign_correspondent")]
        public int? Assign_correspondent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assign_document_type")]
        public int? Assign_document_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assign_storage_path")]
        public int? Assign_storage_path { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assign_owner")]
        public int? Assign_owner { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assign_view_users")]
        public System.Collections.Generic.ICollection<int>? Assign_view_users { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assign_view_groups")]
        public System.Collections.Generic.ICollection<int>? Assign_view_groups { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assign_change_users")]
        public System.Collections.Generic.ICollection<int>? Assign_change_users { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assign_change_groups")]
        public System.Collections.Generic.ICollection<int>? Assign_change_groups { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assign_custom_fields")]
        public System.Collections.Generic.ICollection<int>? Assign_custom_fields { get; set; } = default!;

        /// <summary>
        /// Optionale Werte, die den benutzerdefinierten Feldern zugewiesen werden.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("assign_custom_fields_values")]
        public object? Assign_custom_fields_values { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remove_all_tags")]
        public bool? Remove_all_tags { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remove_tags")]
        public System.Collections.Generic.ICollection<int>? Remove_tags { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remove_all_correspondents")]
        public bool? Remove_all_correspondents { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remove_correspondents")]
        public System.Collections.Generic.ICollection<int>? Remove_correspondents { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remove_all_document_types")]
        public bool? Remove_all_document_types { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remove_document_types")]
        public System.Collections.Generic.ICollection<int>? Remove_document_types { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remove_all_storage_paths")]
        public bool? Remove_all_storage_paths { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remove_storage_paths")]
        public System.Collections.Generic.ICollection<int>? Remove_storage_paths { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remove_custom_fields")]
        public System.Collections.Generic.ICollection<int>? Remove_custom_fields { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remove_all_custom_fields")]
        public bool? Remove_all_custom_fields { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remove_all_owners")]
        public bool? Remove_all_owners { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remove_owners")]
        public System.Collections.Generic.ICollection<int>? Remove_owners { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remove_all_permissions")]
        public bool? Remove_all_permissions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remove_view_users")]
        public System.Collections.Generic.ICollection<int>? Remove_view_users { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remove_view_groups")]
        public System.Collections.Generic.ICollection<int>? Remove_view_groups { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remove_change_users")]
        public System.Collections.Generic.ICollection<int>? Remove_change_users { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remove_change_groups")]
        public System.Collections.Generic.ICollection<int>? Remove_change_groups { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public WorkflowActionEmailRequest? Email { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("webhook")]
        public WorkflowActionWebhookRequest? Webhook { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatchedWorkflowRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("order")]
        public int? Order { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("enabled")]
        public bool? Enabled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("triggers")]
        public System.Collections.Generic.ICollection<WorkflowTriggerRequest>? Triggers { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actions")]
        public System.Collections.Generic.ICollection<WorkflowActionRequest>? Actions { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PatchedWorkflowTriggerRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sources")]
        public System.Collections.Generic.ICollection<SourcesEnum>? Sources { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public WorkflowTriggerTypeEnum? Type { get; set; } = default!;

        /// <summary>
        /// Nur Dokumente, die mit diesem Pfad (falls angegeben) übereinstimmen, verarbeiten. Platzhalter wie * sind erlaubt. Groß- und Kleinschreibung wird nicht beachtet.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("filter_path")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string? Filter_path { get; set; } = default!;

        /// <summary>
        /// Nur Dokumente, die vollständig mit diesem Dateinamen (falls angegeben) übereinstimmen, verarbeiten. Platzhalter wie *.pdf oder *rechnung* sind erlaubt. Groß- und Kleinschreibung wird nicht beachtet.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("filter_filename")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string? Filter_filename { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("filter_mailrule")]
        public int? Filter_mailrule { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("matching_algorithm")]
        public WorkflowTriggerMatchingAlgorithmEnum? Matching_algorithm { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("match")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string? Match { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("is_insensitive")]
        public bool? Is_insensitive { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("filter_has_tags")]
        public System.Collections.Generic.ICollection<int>? Filter_has_tags { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("filter_has_correspondent")]
        public int? Filter_has_correspondent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("filter_has_document_type")]
        public int? Filter_has_document_type { get; set; } = default!;

        /// <summary>
        /// Die Anzahl der Tage, um die der Zeitplanauslöser verschoben werden soll.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("schedule_offset_days")]
        [System.ComponentModel.DataAnnotations.Range(-2147483648, 2147483647)]
        public int? Schedule_offset_days { get; set; } = default!;

        /// <summary>
        /// Ob der Zeitplan wiederholt werden soll.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("schedule_is_recurring")]
        public bool? Schedule_is_recurring { get; set; } = default!;

        /// <summary>
        /// Die Anzahl der Tage zwischen wiederkehrenden Zeitplanauslösern.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("schedule_recurring_interval_days")]
        [System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
        public int? Schedule_recurring_interval_days { get; set; } = default!;

        /// <summary>
        /// Das zu prüfende Feld für einen Zeitplanauslöser.
        /// <br/>
        /// <br/>* `added` - Hinzugefügt
        /// <br/>* `created` - Ausgestellt
        /// <br/>* `modified` - Geändert
        /// <br/>* `custom_field` - Benutzerdefiniertes Feld
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("schedule_date_field")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter<ScheduleDateFieldEnum>))]
        public ScheduleDateFieldEnum? Schedule_date_field { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("schedule_date_custom_field")]
        public int? Schedule_date_custom_field { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// * `0` - Systemstandard
    /// <br/>* `1` - Text, dann HTML
    /// <br/>* `2` - HTML, dann Text
    /// <br/>* `3` - Nur HTML
    /// <br/>* `4` - Nur Text
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PdfLayoutEnum
    {

        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PostDocumentRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("created")]
        public System.DateTimeOffset? Created { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("document")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public byte[] Document { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string? Title { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("correspondent")]
        public int? Correspondent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("document_type")]
        public int? Document_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("storage_path")]
        public int? Storage_path { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("tags")]
        public System.Collections.Generic.ICollection<int>? Tags { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("archive_serial_number")]
        [System.ComponentModel.DataAnnotations.Range(0L, 4294967295L)]
        public long? Archive_serial_number { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("custom_fields")]
        public System.Collections.Generic.ICollection<int>? Custom_fields { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("from_webui")]
        public bool? From_webui { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Profile
    {

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string? Email { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("password")]
        public string? Password { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("first_name")]
        [System.ComponentModel.DataAnnotations.StringLength(150)]
        public string? First_name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("last_name")]
        [System.ComponentModel.DataAnnotations.StringLength(150)]
        public string? Last_name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("auth_token")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Auth_token { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("social_accounts")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SocialAccount> Social_accounts { get; set; } = new System.Collections.ObjectModel.Collection<SocialAccount>();

        [System.Text.Json.Serialization.JsonPropertyName("has_usable_password")]
        public bool Has_usable_password { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("is_mfa_enabled")]
        public bool Is_mfa_enabled { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// * `0` - Titel enthält
    /// <br/>* `1` - Inhalt enthält
    /// <br/>* `2` - ASN ist
    /// <br/>* `3` - Korrespondent ist
    /// <br/>* `4` - Dokumenttyp ist
    /// <br/>* `5` - Ist im Posteingang
    /// <br/>* `6` - Hat Tag
    /// <br/>* `7` - Hat irgendein Tag
    /// <br/>* `8` - Ausgestellt vor
    /// <br/>* `9` - Ausgestellt nach
    /// <br/>* `10` - Ausgestellt im Jahr
    /// <br/>* `11` - Ausgestellt im Monat
    /// <br/>* `12` - Ausstellungstag ist
    /// <br/>* `13` - Hinzugefügt vor
    /// <br/>* `14` - Hinzugefügt nach
    /// <br/>* `15` - Geändert vor
    /// <br/>* `16` - Geändert nach
    /// <br/>* `17` - Hat nicht folgendes Tag
    /// <br/>* `18` - Dokument hat keine ASN
    /// <br/>* `19` - Titel oder Inhalt enthält
    /// <br/>* `20` - Volltextsuche
    /// <br/>* `21` - Ähnliche Dokumente
    /// <br/>* `22` - hat Tags in
    /// <br/>* `23` - ASN größer als
    /// <br/>* `24` - ASN kleiner als
    /// <br/>* `25` - Speicherpfad ist
    /// <br/>* `26` - hat Korrespondenten in
    /// <br/>* `27` - hat keinen Korrespondenten in
    /// <br/>* `28` - hat Dokumenttyp in
    /// <br/>* `29` - hat keinen Dokumenttyp in
    /// <br/>* `30` - hat Speicherpfad in
    /// <br/>* `31` - hat keinen Speicherpfad in
    /// <br/>* `32` - Eigentümer ist
    /// <br/>* `33` - hat Eigentümer in
    /// <br/>* `34` - hat keinen Eigentümer
    /// <br/>* `35` - hat keinen Eigentümer in
    /// <br/>* `36` - Hat benutzerdefinierten Feld-Wert
    /// <br/>* `37` - Ist von mir freigegeben
    /// <br/>* `38` - hat benutzerdefinierte Felder
    /// <br/>* `39` - hat die benutzerdefinierten Felder
    /// <br/>* `40` - hat nicht die benutzerdefinierten Felder
    /// <br/>* `41` - hat nicht das benutzerdefinierte Feld
    /// <br/>* `42` - benutzerdefinierte Feldabfrage
    /// <br/>* `43` - erstellt zu
    /// <br/>* `44` - erstellt von
    /// <br/>* `45` - hinzugefügt zu
    /// <br/>* `46` - hinzugefügt von
    /// <br/>* `47` - MIME-Typ ist
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RuleTypeEnum
    {

        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

        _6 = 6,

        _7 = 7,

        _8 = 8,

        _9 = 9,

        _10 = 10,

        _11 = 11,

        _12 = 12,

        _13 = 13,

        _14 = 14,

        _15 = 15,

        _16 = 16,

        _17 = 17,

        _18 = 18,

        _19 = 19,

        _20 = 20,

        _21 = 21,

        _22 = 22,

        _23 = 23,

        _24 = 24,

        _25 = 25,

        _26 = 26,

        _27 = 27,

        _28 = 28,

        _29 = 29,

        _30 = 30,

        _31 = 31,

        _32 = 32,

        _33 = 33,

        _34 = 34,

        _35 = 35,

        _36 = 36,

        _37 = 37,

        _38 = 38,

        _39 = 39,

        _40 = 40,

        _41 = 41,

        _42 = 42,

        _43 = 43,

        _44 = 44,

        _45 = 45,

        _46 = 46,

        _47 = 47,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SanityCheck
    {

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("error")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Error { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("last_run")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Last_run { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SavedView
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("show_on_dashboard")]
        public bool Show_on_dashboard { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("show_in_sidebar")]
        public bool Show_in_sidebar { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sort_field")]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string? Sort_field { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sort_reverse")]
        public bool? Sort_reverse { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("filter_rules")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SavedViewFilterRule> Filter_rules { get; set; } = new System.Collections.ObjectModel.Collection<SavedViewFilterRule>();

        [System.Text.Json.Serialization.JsonPropertyName("page_size")]
        [System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
        public int? Page_size { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("display_mode")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter<DisplayModeEnum>))]
        public DisplayModeEnum? Display_mode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("display_fields")]
        public object? Display_fields { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("owner")]
        public int? Owner { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("user_can_change")]
        public bool User_can_change { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SavedViewFilterRule
    {

        [System.Text.Json.Serialization.JsonPropertyName("rule_type")]
        public RuleTypeEnum Rule_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string? Value { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SavedViewFilterRuleRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("rule_type")]
        public RuleTypeEnum Rule_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string? Value { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SavedViewRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("show_on_dashboard")]
        public bool Show_on_dashboard { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("show_in_sidebar")]
        public bool Show_in_sidebar { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sort_field")]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string? Sort_field { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sort_reverse")]
        public bool? Sort_reverse { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("filter_rules")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SavedViewFilterRuleRequest> Filter_rules { get; set; } = new System.Collections.ObjectModel.Collection<SavedViewFilterRuleRequest>();

        [System.Text.Json.Serialization.JsonPropertyName("page_size")]
        [System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
        public int? Page_size { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("display_mode")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter<DisplayModeEnum>))]
        public DisplayModeEnum? Display_mode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("display_fields")]
        public object? Display_fields { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("owner")]
        public int? Owner { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// * `added` - Hinzugefügt
    /// <br/>* `created` - Ausgestellt
    /// <br/>* `modified` - Geändert
    /// <br/>* `custom_field` - Benutzerdefiniertes Feld
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ScheduleDateFieldEnum
    {

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"added")]
        Added = 0,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"created")]
        Created = 1,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"modified")]
        Modified = 2,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"custom_field")]
        Custom_field = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SearchResult
    {

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("documents")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Document> Documents { get; set; } = new System.Collections.ObjectModel.Collection<Document>();

        [System.Text.Json.Serialization.JsonPropertyName("saved_views")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SavedView> Saved_views { get; set; } = new System.Collections.ObjectModel.Collection<SavedView>();

        [System.Text.Json.Serialization.JsonPropertyName("tags")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Tag> Tags { get; set; } = new System.Collections.ObjectModel.Collection<Tag>();

        [System.Text.Json.Serialization.JsonPropertyName("correspondents")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Correspondent> Correspondents { get; set; } = new System.Collections.ObjectModel.Collection<Correspondent>();

        [System.Text.Json.Serialization.JsonPropertyName("document_types")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<DocumentType> Document_types { get; set; } = new System.Collections.ObjectModel.Collection<DocumentType>();

        [System.Text.Json.Serialization.JsonPropertyName("storage_paths")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<StoragePath> Storage_paths { get; set; } = new System.Collections.ObjectModel.Collection<StoragePath>();

        [System.Text.Json.Serialization.JsonPropertyName("users")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<User> Users { get; set; } = new System.Collections.ObjectModel.Collection<User>();

        [System.Text.Json.Serialization.JsonPropertyName("groups")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Group> Groups { get; set; } = new System.Collections.ObjectModel.Collection<Group>();

        [System.Text.Json.Serialization.JsonPropertyName("mail_rules")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<MailRule> Mail_rules { get; set; } = new System.Collections.ObjectModel.Collection<MailRule>();

        [System.Text.Json.Serialization.JsonPropertyName("mail_accounts")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<MailAccount> Mail_accounts { get; set; } = new System.Collections.ObjectModel.Collection<MailAccount>();

        [System.Text.Json.Serialization.JsonPropertyName("workflows")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Workflow> Workflows { get; set; } = new System.Collections.ObjectModel.Collection<Workflow>();

        [System.Text.Json.Serialization.JsonPropertyName("custom_fields")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CustomField> Custom_fields { get; set; } = new System.Collections.ObjectModel.Collection<CustomField>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SelectionData
    {

        [System.Text.Json.Serialization.JsonPropertyName("selected_correspondents")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CorrespondentCounts> Selected_correspondents { get; set; } = new System.Collections.ObjectModel.Collection<CorrespondentCounts>();

        [System.Text.Json.Serialization.JsonPropertyName("selected_tags")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<TagCounts> Selected_tags { get; set; } = new System.Collections.ObjectModel.Collection<TagCounts>();

        [System.Text.Json.Serialization.JsonPropertyName("selected_document_types")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<DocumentTypeCounts> Selected_document_types { get; set; } = new System.Collections.ObjectModel.Collection<DocumentTypeCounts>();

        [System.Text.Json.Serialization.JsonPropertyName("selected_storage_paths")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<StoragePathCounts> Selected_storage_paths { get; set; } = new System.Collections.ObjectModel.Collection<StoragePathCounts>();

        [System.Text.Json.Serialization.JsonPropertyName("selected_custom_fields")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CustomFieldCounts> Selected_custom_fields { get; set; } = new System.Collections.ObjectModel.Collection<CustomFieldCounts>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShareLink
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("created")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset Created { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("expiration")]
        public System.DateTimeOffset? Expiration { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("slug")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[-a-zA-Z0-9_]+$")]
        public string Slug { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("document")]
        public int? Document { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("file_version")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter<FileVersionEnum>))]
        public FileVersionEnum? File_version { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ShareLinkRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("expiration")]
        public System.DateTimeOffset? Expiration { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("document")]
        public int? Document { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("file_version")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter<FileVersionEnum>))]
        public FileVersionEnum? File_version { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// * `never` - nie
    /// <br/>* `with_text` - with_text
    /// <br/>* `always` - immer
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SkipArchiveFileEnum
    {

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"never")]
        Never = 0,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"with_text")]
        With_text = 1,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"always")]
        Always = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SocialAccount
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("provider")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(200)]
        public string Provider { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SocialAccountRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("provider")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        public string Provider { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// * `1` - Importordner
    /// <br/>* `2` - API-Upload
    /// <br/>* `3` - E-Mail-Abruf
    /// <br/>* `4` - Weboberfläche
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum SourcesEnum
    {

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

    }

    /// <summary>
    /// * `FAILURE` - FAILURE
    /// <br/>* `PENDING` - PENDING
    /// <br/>* `RECEIVED` - RECEIVED
    /// <br/>* `RETRY` - RETRY
    /// <br/>* `REVOKED` - REVOKED
    /// <br/>* `STARTED` - STARTED
    /// <br/>* `SUCCESS` - SUCCESS
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum StatusEnum
    {

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"FAILURE")]
        FAILURE = 0,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"PENDING")]
        PENDING = 1,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"RECEIVED")]
        RECEIVED = 2,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"RETRY")]
        RETRY = 3,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"REVOKED")]
        REVOKED = 4,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"STARTED")]
        STARTED = 5,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"SUCCESS")]
        SUCCESS = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Storage
    {

        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public int Total { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("available")]
        public int Available { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StoragePath
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("slug")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Slug { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("path")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Path { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("match")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string? Match { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("matching_algorithm")]
        public MatchingAlgorithm? Matching_algorithm { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("is_insensitive")]
        public bool? Is_insensitive { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("document_count")]
        public int Document_count { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("owner")]
        public int? Owner { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("user_can_change")]
        public bool User_can_change { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StoragePathCounts
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("document_count")]
        public int Document_count { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StoragePathRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("path")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Path { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("match")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string? Match { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("matching_algorithm")]
        public MatchingAlgorithm? Matching_algorithm { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("is_insensitive")]
        public bool? Is_insensitive { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("owner")]
        public int? Owner { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("set_permissions")]
        public Set_permissions11? Set_permissions { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Suggestions
    {

        [System.Text.Json.Serialization.JsonPropertyName("correspondents")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<int> Correspondents { get; set; } = new System.Collections.ObjectModel.Collection<int>();

        [System.Text.Json.Serialization.JsonPropertyName("tags")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<int> Tags { get; set; } = new System.Collections.ObjectModel.Collection<int>();

        [System.Text.Json.Serialization.JsonPropertyName("document_types")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<int> Document_types { get; set; } = new System.Collections.ObjectModel.Collection<int>();

        [System.Text.Json.Serialization.JsonPropertyName("storage_paths")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<int> Storage_paths { get; set; } = new System.Collections.ObjectModel.Collection<int>();

        [System.Text.Json.Serialization.JsonPropertyName("dates")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Dates { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SystemStatus
    {

        [System.Text.Json.Serialization.JsonPropertyName("pngx_version")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Pngx_version { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("server_os")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Server_os { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("install_type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Install_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("storage")]
        [System.ComponentModel.DataAnnotations.Required]
        public Storage Storage { get; set; } = new Storage();

        [System.Text.Json.Serialization.JsonPropertyName("database")]
        [System.ComponentModel.DataAnnotations.Required]
        public Database Database { get; set; } = new Database();

        [System.Text.Json.Serialization.JsonPropertyName("tasks")]
        [System.ComponentModel.DataAnnotations.Required]
        public Tasks Tasks { get; set; } = new Tasks();

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        [System.ComponentModel.DataAnnotations.Required]
        public Index Index { get; set; } = new Index();

        [System.Text.Json.Serialization.JsonPropertyName("classifier")]
        [System.ComponentModel.DataAnnotations.Required]
        public Classifier Classifier { get; set; } = new Classifier();

        [System.Text.Json.Serialization.JsonPropertyName("sanity_check")]
        [System.ComponentModel.DataAnnotations.Required]
        public SanityCheck Sanity_check { get; set; } = new SanityCheck();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Tag
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("slug")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Slug { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("color")]
        [System.ComponentModel.DataAnnotations.StringLength(7)]
        public string? Color { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("text_color")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Text_color { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("match")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string? Match { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("matching_algorithm")]
        public MatchingAlgorithm? Matching_algorithm { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("is_insensitive")]
        public bool? Is_insensitive { get; set; } = default!;

        /// <summary>
        /// Markiert das Tag als Posteingangs-Tag. Neue Dokumente werden immer mit diesem Tag versehen.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("is_inbox_tag")]
        public bool? Is_inbox_tag { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("document_count")]
        public int Document_count { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("owner")]
        public int? Owner { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("user_can_change")]
        public bool User_can_change { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TagCounts
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("document_count")]
        public int Document_count { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TagRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(128, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("color")]
        [System.ComponentModel.DataAnnotations.StringLength(7, MinimumLength = 1)]
        public string? Color { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("match")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string? Match { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("matching_algorithm")]
        public MatchingAlgorithm? Matching_algorithm { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("is_insensitive")]
        public bool? Is_insensitive { get; set; } = default!;

        /// <summary>
        /// Markiert das Tag als Posteingangs-Tag. Neue Dokumente werden immer mit diesem Tag versehen.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("is_inbox_tag")]
        public bool? Is_inbox_tag { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("owner")]
        public int? Owner { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("set_permissions")]
        public Set_permissions13? Set_permissions { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// * `consume_file` - Datei verarbeiten
    /// <br/>* `train_classifier` - Klassifikator trainieren
    /// <br/>* `check_sanity` - Plausibilität prüfen
    /// <br/>* `index_optimize` - Indexoptimierung
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TaskNameEnum
    {

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"consume_file")]
        Consume_file = 0,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"train_classifier")]
        Train_classifier = 1,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"check_sanity")]
        Check_sanity = 2,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"index_optimize")]
        Index_optimize = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Tasks
    {

        [System.Text.Json.Serialization.JsonPropertyName("redis_url")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Redis_url { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("redis_status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Redis_status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("redis_error")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Redis_error { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("celery_status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Celery_status { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TasksView
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; } = default!;

        /// <summary>
        /// Celery-ID für die ausgeführte Aufgabe
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("task_id")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Task_id { get; set; } = default!;

        /// <summary>
        /// Name der ausgeführten Aufgabe
        /// <br/>
        /// <br/>* `consume_file` - Datei verarbeiten
        /// <br/>* `train_classifier` - Klassifikator trainieren
        /// <br/>* `check_sanity` - Plausibilität prüfen
        /// <br/>* `index_optimize` - Indexoptimierung
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("task_name")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter<TaskNameEnum>))]
        public TaskNameEnum? Task_name { get; set; } = default!;

        /// <summary>
        /// Name der Datei, für die die Aufgabe ausgeführt wurde
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("task_file_name")]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string? Task_file_name { get; set; } = default!;

        /// <summary>
        /// Zeitpunkt, an dem das Ergebnis der Aufgabe erstellt wurde (in UTC)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("date_created")]
        public System.DateTimeOffset? Date_created { get; set; } = default!;

        /// <summary>
        /// Zeitpunkt, an dem die Aufgabe abgeschlossen wurde (in UTC)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("date_done")]
        public System.DateTimeOffset? Date_done { get; set; } = default!;

        /// <summary>
        /// Art der ausgeführten Aufgabe
        /// <br/>
        /// <br/>* `auto_task` - Automatische Aufgabe
        /// <br/>* `scheduled_task` - Geplante Aufgabe
        /// <br/>* `manual_task` - Manuelle Aufgabe
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter<TasksViewTypeEnum>))]
        public TasksViewTypeEnum? Type { get; set; } = default!;

        /// <summary>
        /// Aktueller Status der laufenden Aufgabe
        /// <br/>
        /// <br/>* `FAILURE` - FAILURE
        /// <br/>* `PENDING` - PENDING
        /// <br/>* `RECEIVED` - RECEIVED
        /// <br/>* `RETRY` - RETRY
        /// <br/>* `REVOKED` - REVOKED
        /// <br/>* `STARTED` - STARTED
        /// <br/>* `SUCCESS` - SUCCESS
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter<StatusEnum>))]
        public StatusEnum? Status { get; set; } = default!;

        /// <summary>
        /// Die von der Aufgabe zurückgegebenen Daten
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("result")]
        public string? Result { get; set; } = default!;

        /// <summary>
        /// Wenn die Aufgabe über die Benutzeroberfläche oder die API bestätigt wird
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("acknowledged")]
        public bool? Acknowledged { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("related_document")]
        public string? Related_document { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("owner")]
        public int? Owner { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TasksViewRequest
    {

        /// <summary>
        /// Celery-ID für die ausgeführte Aufgabe
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("task_id")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength = 1)]
        public string Task_id { get; set; } = default!;

        /// <summary>
        /// Name der ausgeführten Aufgabe
        /// <br/>
        /// <br/>* `consume_file` - Datei verarbeiten
        /// <br/>* `train_classifier` - Klassifikator trainieren
        /// <br/>* `check_sanity` - Plausibilität prüfen
        /// <br/>* `index_optimize` - Indexoptimierung
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("task_name")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter<TaskNameEnum>))]
        public TaskNameEnum? Task_name { get; set; } = default!;

        /// <summary>
        /// Name der Datei, für die die Aufgabe ausgeführt wurde
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("task_file_name")]
        [System.ComponentModel.DataAnnotations.StringLength(255, MinimumLength = 1)]
        public string? Task_file_name { get; set; } = default!;

        /// <summary>
        /// Zeitpunkt, an dem das Ergebnis der Aufgabe erstellt wurde (in UTC)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("date_created")]
        public System.DateTimeOffset? Date_created { get; set; } = default!;

        /// <summary>
        /// Zeitpunkt, an dem die Aufgabe abgeschlossen wurde (in UTC)
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("date_done")]
        public System.DateTimeOffset? Date_done { get; set; } = default!;

        /// <summary>
        /// Art der ausgeführten Aufgabe
        /// <br/>
        /// <br/>* `auto_task` - Automatische Aufgabe
        /// <br/>* `scheduled_task` - Geplante Aufgabe
        /// <br/>* `manual_task` - Manuelle Aufgabe
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter<TasksViewTypeEnum>))]
        public TasksViewTypeEnum? Type { get; set; } = default!;

        /// <summary>
        /// Aktueller Status der laufenden Aufgabe
        /// <br/>
        /// <br/>* `FAILURE` - FAILURE
        /// <br/>* `PENDING` - PENDING
        /// <br/>* `RECEIVED` - RECEIVED
        /// <br/>* `RETRY` - RETRY
        /// <br/>* `REVOKED` - REVOKED
        /// <br/>* `STARTED` - STARTED
        /// <br/>* `SUCCESS` - SUCCESS
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter<StatusEnum>))]
        public StatusEnum? Status { get; set; } = default!;

        /// <summary>
        /// Die von der Aufgabe zurückgegebenen Daten
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("result")]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string? Result { get; set; } = default!;

        /// <summary>
        /// Wenn die Aufgabe über die Benutzeroberfläche oder die API bestätigt wird
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("acknowledged")]
        public bool? Acknowledged { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("owner")]
        public int? Owner { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// * `auto_task` - Automatische Aufgabe
    /// <br/>* `scheduled_task` - Geplante Aufgabe
    /// <br/>* `manual_task` - Manuelle Aufgabe
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TasksViewTypeEnum
    {

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"auto_task")]
        Auto_task = 0,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"scheduled_task")]
        Scheduled_task = 1,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"manual_task")]
        Manual_task = 2,

    }

    /// <summary>
    /// * `restore` - restore
    /// <br/>* `empty` - empty
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TrashActionEnum
    {

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"restore")]
        Restore = 0,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"empty")]
        Empty = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TrashRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("documents")]
        public System.Collections.Generic.ICollection<int>? Documents { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("action")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter<TrashActionEnum>))]
        public TrashActionEnum Action { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UiSettingsView
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("settings")]
        public System.Collections.Generic.IDictionary<string, object>? Settings { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UiSettingsViewRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("settings")]
        public System.Collections.Generic.IDictionary<string, object>? Settings { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// * `clean` - bereinigen
    /// <br/>* `clean-final` - clean-final
    /// <br/>* `none` - keine
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum UnpaperCleanEnum
    {

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"clean")]
        Clean = 0,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"clean-final")]
        CleanFinal = 1,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"none")]
        None = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class User
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; } = default!;

        /// <summary>
        /// Erforderlich. 150 Zeichen oder weniger. Nur Buchstaben, Ziffern und @/./+/-/_.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("username")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(150)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[\w.@+-]+$")]
        public string Username { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        [System.ComponentModel.DataAnnotations.StringLength(254)]
        public string? Email { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("password")]
        public string? Password { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("first_name")]
        [System.ComponentModel.DataAnnotations.StringLength(150)]
        public string? First_name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("last_name")]
        [System.ComponentModel.DataAnnotations.StringLength(150)]
        public string? Last_name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("date_joined")]
        public System.DateTimeOffset? Date_joined { get; set; } = default!;

        /// <summary>
        /// Legt fest, ob sich der Benutzer an der Administrationsseite anmelden kann.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("is_staff")]
        public bool? Is_staff { get; set; } = default!;

        /// <summary>
        /// Legt fest, ob dieser Benutzer aktiv ist. Kann deaktiviert werden, anstatt Benutzer zu löschen.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("is_active")]
        public bool? Is_active { get; set; } = default!;

        /// <summary>
        /// Legt fest, dass der Benutzer alle Berechtigungen hat, ohne diese einzeln zuweisen zu müssen.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("is_superuser")]
        public bool? Is_superuser { get; set; } = default!;

        /// <summary>
        /// Die Gruppen, denen der Benutzer angehört. Ein Benutzer bekommt alle Berechtigungen dieser Gruppen.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("groups")]
        public System.Collections.Generic.ICollection<int>? Groups { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("user_permissions")]
        public System.Collections.Generic.ICollection<string>? User_permissions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("inherited_permissions")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Inherited_permissions { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        [System.Text.Json.Serialization.JsonPropertyName("is_mfa_enabled")]
        public bool Is_mfa_enabled { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserRequest
    {

        /// <summary>
        /// Erforderlich. 150 Zeichen oder weniger. Nur Buchstaben, Ziffern und @/./+/-/_.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("username")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(150, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[\w.@+-]+$")]
        public string Username { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        [System.ComponentModel.DataAnnotations.StringLength(254)]
        public string? Email { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("password")]
        [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
        public string? Password { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("first_name")]
        [System.ComponentModel.DataAnnotations.StringLength(150)]
        public string? First_name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("last_name")]
        [System.ComponentModel.DataAnnotations.StringLength(150)]
        public string? Last_name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("date_joined")]
        public System.DateTimeOffset? Date_joined { get; set; } = default!;

        /// <summary>
        /// Legt fest, ob sich der Benutzer an der Administrationsseite anmelden kann.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("is_staff")]
        public bool? Is_staff { get; set; } = default!;

        /// <summary>
        /// Legt fest, ob dieser Benutzer aktiv ist. Kann deaktiviert werden, anstatt Benutzer zu löschen.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("is_active")]
        public bool? Is_active { get; set; } = default!;

        /// <summary>
        /// Legt fest, dass der Benutzer alle Berechtigungen hat, ohne diese einzeln zuweisen zu müssen.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("is_superuser")]
        public bool? Is_superuser { get; set; } = default!;

        /// <summary>
        /// Die Gruppen, denen der Benutzer angehört. Ein Benutzer bekommt alle Berechtigungen dieser Gruppen.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("groups")]
        public System.Collections.Generic.ICollection<int>? Groups { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("user_permissions")]
        public System.Collections.Generic.ICollection<string>? User_permissions { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Workflow
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("order")]
        public int? Order { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("enabled")]
        public bool? Enabled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("triggers")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<WorkflowTrigger> Triggers { get; set; } = new System.Collections.ObjectModel.Collection<WorkflowTrigger>();

        [System.Text.Json.Serialization.JsonPropertyName("actions")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<WorkflowAction> Actions { get; set; } = new System.Collections.ObjectModel.Collection<WorkflowAction>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WorkflowAction
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public WorkflowActionTypeEnum? Type { get; set; } = default!;

        /// <summary>
        /// Weisen Sie einen Dokumententitel zu. Dieser kann Platzhalter beinhalten, siehe Dokumentation.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("assign_title")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string? Assign_title { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assign_tags")]
        public System.Collections.Generic.ICollection<int?>? Assign_tags { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assign_correspondent")]
        public int? Assign_correspondent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assign_document_type")]
        public int? Assign_document_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assign_storage_path")]
        public int? Assign_storage_path { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assign_owner")]
        public int? Assign_owner { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assign_view_users")]
        public System.Collections.Generic.ICollection<int>? Assign_view_users { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assign_view_groups")]
        public System.Collections.Generic.ICollection<int>? Assign_view_groups { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assign_change_users")]
        public System.Collections.Generic.ICollection<int>? Assign_change_users { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assign_change_groups")]
        public System.Collections.Generic.ICollection<int>? Assign_change_groups { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assign_custom_fields")]
        public System.Collections.Generic.ICollection<int>? Assign_custom_fields { get; set; } = default!;

        /// <summary>
        /// Optionale Werte, die den benutzerdefinierten Feldern zugewiesen werden.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("assign_custom_fields_values")]
        public object? Assign_custom_fields_values { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remove_all_tags")]
        public bool? Remove_all_tags { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remove_tags")]
        public System.Collections.Generic.ICollection<int>? Remove_tags { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remove_all_correspondents")]
        public bool? Remove_all_correspondents { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remove_correspondents")]
        public System.Collections.Generic.ICollection<int>? Remove_correspondents { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remove_all_document_types")]
        public bool? Remove_all_document_types { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remove_document_types")]
        public System.Collections.Generic.ICollection<int>? Remove_document_types { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remove_all_storage_paths")]
        public bool? Remove_all_storage_paths { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remove_storage_paths")]
        public System.Collections.Generic.ICollection<int>? Remove_storage_paths { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remove_custom_fields")]
        public System.Collections.Generic.ICollection<int>? Remove_custom_fields { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remove_all_custom_fields")]
        public bool? Remove_all_custom_fields { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remove_all_owners")]
        public bool? Remove_all_owners { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remove_owners")]
        public System.Collections.Generic.ICollection<int>? Remove_owners { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remove_all_permissions")]
        public bool? Remove_all_permissions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remove_view_users")]
        public System.Collections.Generic.ICollection<int>? Remove_view_users { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remove_view_groups")]
        public System.Collections.Generic.ICollection<int>? Remove_view_groups { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remove_change_users")]
        public System.Collections.Generic.ICollection<int>? Remove_change_users { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remove_change_groups")]
        public System.Collections.Generic.ICollection<int>? Remove_change_groups { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public WorkflowActionEmail? Email { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("webhook")]
        public WorkflowActionWebhook? Webhook { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WorkflowActionEmail
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; } = default!;

        /// <summary>
        /// Der Betreff der E-Mail kann Platzhalter beinhalten, siehe Dokumentation.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("subject")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string Subject { get; set; } = default!;

        /// <summary>
        /// Der Text der E-Mail kann Platzhalter beinhalten, siehe Dokumentation.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Body { get; set; } = default!;

        /// <summary>
        /// Die Empfänger-E-Mail-Adressen, kommagetrennt.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("to")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string To { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("include_document")]
        public bool? Include_document { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WorkflowActionEmailRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; } = default!;

        /// <summary>
        /// Der Betreff der E-Mail kann Platzhalter beinhalten, siehe Dokumentation.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("subject")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string Subject { get; set; } = default!;

        /// <summary>
        /// Der Text der E-Mail kann Platzhalter beinhalten, siehe Dokumentation.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        [System.ComponentModel.DataAnnotations.Required]
        public string Body { get; set; } = default!;

        /// <summary>
        /// Die Empfänger-E-Mail-Adressen, kommagetrennt.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("to")]
        [System.ComponentModel.DataAnnotations.Required]
        public string To { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("include_document")]
        public bool? Include_document { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WorkflowActionRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public WorkflowActionTypeEnum? Type { get; set; } = default!;

        /// <summary>
        /// Weisen Sie einen Dokumententitel zu. Dieser kann Platzhalter beinhalten, siehe Dokumentation.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("assign_title")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string? Assign_title { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assign_tags")]
        public System.Collections.Generic.ICollection<int?>? Assign_tags { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assign_correspondent")]
        public int? Assign_correspondent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assign_document_type")]
        public int? Assign_document_type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assign_storage_path")]
        public int? Assign_storage_path { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assign_owner")]
        public int? Assign_owner { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assign_view_users")]
        public System.Collections.Generic.ICollection<int>? Assign_view_users { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assign_view_groups")]
        public System.Collections.Generic.ICollection<int>? Assign_view_groups { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assign_change_users")]
        public System.Collections.Generic.ICollection<int>? Assign_change_users { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assign_change_groups")]
        public System.Collections.Generic.ICollection<int>? Assign_change_groups { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("assign_custom_fields")]
        public System.Collections.Generic.ICollection<int>? Assign_custom_fields { get; set; } = default!;

        /// <summary>
        /// Optionale Werte, die den benutzerdefinierten Feldern zugewiesen werden.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("assign_custom_fields_values")]
        public object? Assign_custom_fields_values { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remove_all_tags")]
        public bool? Remove_all_tags { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remove_tags")]
        public System.Collections.Generic.ICollection<int>? Remove_tags { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remove_all_correspondents")]
        public bool? Remove_all_correspondents { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remove_correspondents")]
        public System.Collections.Generic.ICollection<int>? Remove_correspondents { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remove_all_document_types")]
        public bool? Remove_all_document_types { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remove_document_types")]
        public System.Collections.Generic.ICollection<int>? Remove_document_types { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remove_all_storage_paths")]
        public bool? Remove_all_storage_paths { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remove_storage_paths")]
        public System.Collections.Generic.ICollection<int>? Remove_storage_paths { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remove_custom_fields")]
        public System.Collections.Generic.ICollection<int>? Remove_custom_fields { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remove_all_custom_fields")]
        public bool? Remove_all_custom_fields { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remove_all_owners")]
        public bool? Remove_all_owners { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remove_owners")]
        public System.Collections.Generic.ICollection<int>? Remove_owners { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remove_all_permissions")]
        public bool? Remove_all_permissions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remove_view_users")]
        public System.Collections.Generic.ICollection<int>? Remove_view_users { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remove_view_groups")]
        public System.Collections.Generic.ICollection<int>? Remove_view_groups { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remove_change_users")]
        public System.Collections.Generic.ICollection<int>? Remove_change_users { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remove_change_groups")]
        public System.Collections.Generic.ICollection<int>? Remove_change_groups { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public WorkflowActionEmailRequest? Email { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("webhook")]
        public WorkflowActionWebhookRequest? Webhook { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// * `1` - Zuordnung
    /// <br/>* `2` - Entfernung
    /// <br/>* `3` - E-Mail
    /// <br/>* `4` - Webhook
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum WorkflowActionTypeEnum
    {

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WorkflowActionWebhook
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; } = default!;

        /// <summary>
        /// Die Ziel-URL für die Benachrichtigung.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("url")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string Url { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("use_params")]
        public bool? Use_params { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("as_json")]
        public bool? As_json { get; set; } = default!;

        /// <summary>
        /// Die Parameter, die mit der Webhook-URL gesendet werden sollen, wenn kein Inhalt verwendet wird.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("params")]
        public object? Params { get; set; } = default!;

        /// <summary>
        /// Der Inhalt, der mit der Webhook-URL gesendet werden soll, wenn Parameter nicht verwendet werden.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public string? Body { get; set; } = default!;

        /// <summary>
        /// Die Kopfzeilen, die mit der Webhook-URL gesendet werden sollen.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("headers")]
        public object? Headers { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("include_document")]
        public bool? Include_document { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WorkflowActionWebhookRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; } = default!;

        /// <summary>
        /// Die Ziel-URL für die Benachrichtigung.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("url")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string Url { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("use_params")]
        public bool? Use_params { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("as_json")]
        public bool? As_json { get; set; } = default!;

        /// <summary>
        /// Die Parameter, die mit der Webhook-URL gesendet werden sollen, wenn kein Inhalt verwendet wird.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("params")]
        public object? Params { get; set; } = default!;

        /// <summary>
        /// Der Inhalt, der mit der Webhook-URL gesendet werden soll, wenn Parameter nicht verwendet werden.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("body")]
        public string? Body { get; set; } = default!;

        /// <summary>
        /// Die Kopfzeilen, die mit der Webhook-URL gesendet werden sollen.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("headers")]
        public object? Headers { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("include_document")]
        public bool? Include_document { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WorkflowRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("order")]
        public int? Order { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("enabled")]
        public bool? Enabled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("triggers")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<WorkflowTriggerRequest> Triggers { get; set; } = new System.Collections.ObjectModel.Collection<WorkflowTriggerRequest>();

        [System.Text.Json.Serialization.JsonPropertyName("actions")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<WorkflowActionRequest> Actions { get; set; } = new System.Collections.ObjectModel.Collection<WorkflowActionRequest>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WorkflowTrigger
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sources")]
        public System.Collections.Generic.ICollection<SourcesEnum>? Sources { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public WorkflowTriggerTypeEnum Type { get; set; } = default!;

        /// <summary>
        /// Nur Dokumente, die mit diesem Pfad (falls angegeben) übereinstimmen, verarbeiten. Platzhalter wie * sind erlaubt. Groß- und Kleinschreibung wird nicht beachtet.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("filter_path")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string? Filter_path { get; set; } = default!;

        /// <summary>
        /// Nur Dokumente, die vollständig mit diesem Dateinamen (falls angegeben) übereinstimmen, verarbeiten. Platzhalter wie *.pdf oder *rechnung* sind erlaubt. Groß- und Kleinschreibung wird nicht beachtet.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("filter_filename")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string? Filter_filename { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("filter_mailrule")]
        public int? Filter_mailrule { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("matching_algorithm")]
        public WorkflowTriggerMatchingAlgorithmEnum? Matching_algorithm { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("match")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string? Match { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("is_insensitive")]
        public bool? Is_insensitive { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("filter_has_tags")]
        public System.Collections.Generic.ICollection<int>? Filter_has_tags { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("filter_has_correspondent")]
        public int? Filter_has_correspondent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("filter_has_document_type")]
        public int? Filter_has_document_type { get; set; } = default!;

        /// <summary>
        /// Die Anzahl der Tage, um die der Zeitplanauslöser verschoben werden soll.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("schedule_offset_days")]
        [System.ComponentModel.DataAnnotations.Range(-2147483648, 2147483647)]
        public int? Schedule_offset_days { get; set; } = default!;

        /// <summary>
        /// Ob der Zeitplan wiederholt werden soll.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("schedule_is_recurring")]
        public bool? Schedule_is_recurring { get; set; } = default!;

        /// <summary>
        /// Die Anzahl der Tage zwischen wiederkehrenden Zeitplanauslösern.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("schedule_recurring_interval_days")]
        [System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
        public int? Schedule_recurring_interval_days { get; set; } = default!;

        /// <summary>
        /// Das zu prüfende Feld für einen Zeitplanauslöser.
        /// <br/>
        /// <br/>* `added` - Hinzugefügt
        /// <br/>* `created` - Ausgestellt
        /// <br/>* `modified` - Geändert
        /// <br/>* `custom_field` - Benutzerdefiniertes Feld
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("schedule_date_field")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter<ScheduleDateFieldEnum>))]
        public ScheduleDateFieldEnum? Schedule_date_field { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("schedule_date_custom_field")]
        public int? Schedule_date_custom_field { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// * `0` - Keiner
    /// <br/>* `1` - Irgendein Wort
    /// <br/>* `2` - Alle Wörter
    /// <br/>* `3` - Exakte Übereinstimmung
    /// <br/>* `4` - Regulärer Ausdruck
    /// <br/>* `5` - Ungenaues Wort
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum WorkflowTriggerMatchingAlgorithmEnum
    {

        _0 = 0,

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

        _5 = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class WorkflowTriggerRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sources")]
        public System.Collections.Generic.ICollection<SourcesEnum>? Sources { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public WorkflowTriggerTypeEnum Type { get; set; } = default!;

        /// <summary>
        /// Nur Dokumente, die mit diesem Pfad (falls angegeben) übereinstimmen, verarbeiten. Platzhalter wie * sind erlaubt. Groß- und Kleinschreibung wird nicht beachtet.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("filter_path")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string? Filter_path { get; set; } = default!;

        /// <summary>
        /// Nur Dokumente, die vollständig mit diesem Dateinamen (falls angegeben) übereinstimmen, verarbeiten. Platzhalter wie *.pdf oder *rechnung* sind erlaubt. Groß- und Kleinschreibung wird nicht beachtet.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("filter_filename")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string? Filter_filename { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("filter_mailrule")]
        public int? Filter_mailrule { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("matching_algorithm")]
        public WorkflowTriggerMatchingAlgorithmEnum? Matching_algorithm { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("match")]
        [System.ComponentModel.DataAnnotations.StringLength(256)]
        public string? Match { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("is_insensitive")]
        public bool? Is_insensitive { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("filter_has_tags")]
        public System.Collections.Generic.ICollection<int>? Filter_has_tags { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("filter_has_correspondent")]
        public int? Filter_has_correspondent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("filter_has_document_type")]
        public int? Filter_has_document_type { get; set; } = default!;

        /// <summary>
        /// Die Anzahl der Tage, um die der Zeitplanauslöser verschoben werden soll.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("schedule_offset_days")]
        [System.ComponentModel.DataAnnotations.Range(-2147483648, 2147483647)]
        public int? Schedule_offset_days { get; set; } = default!;

        /// <summary>
        /// Ob der Zeitplan wiederholt werden soll.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("schedule_is_recurring")]
        public bool? Schedule_is_recurring { get; set; } = default!;

        /// <summary>
        /// Die Anzahl der Tage zwischen wiederkehrenden Zeitplanauslösern.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("schedule_recurring_interval_days")]
        [System.ComponentModel.DataAnnotations.Range(1, 2147483647)]
        public int? Schedule_recurring_interval_days { get; set; } = default!;

        /// <summary>
        /// Das zu prüfende Feld für einen Zeitplanauslöser.
        /// <br/>
        /// <br/>* `added` - Hinzugefügt
        /// <br/>* `created` - Ausgestellt
        /// <br/>* `modified` - Geändert
        /// <br/>* `custom_field` - Benutzerdefiniertes Feld
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyName("schedule_date_field")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter<ScheduleDateFieldEnum>))]
        public ScheduleDateFieldEnum? Schedule_date_field { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("schedule_date_custom_field")]
        public int? Schedule_date_custom_field { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// * `1` - Verarbeitung gestartet
    /// <br/>* `2` - Dokument hinzugefügt
    /// <br/>* `3` - Dokument aktualisiert
    /// <br/>* `4` - Geplant
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum WorkflowTriggerTypeEnum
    {

        _1 = 1,

        _2 = 2,

        _3 = 3,

        _4 = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Set_permissions
    {

        [System.Text.Json.Serialization.JsonPropertyName("view")]
        public View? View { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("change")]
        public Change? Change { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Set_permissions2
    {

        [System.Text.Json.Serialization.JsonPropertyName("view")]
        public View2? View { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("change")]
        public Change2? Change { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Set_permissions3
    {

        [System.Text.Json.Serialization.JsonPropertyName("view")]
        public View3? View { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("change")]
        public Change3? Change { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Set_permissions4
    {

        [System.Text.Json.Serialization.JsonPropertyName("view")]
        public View4? View { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("change")]
        public Change4? Change { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Set_permissions5
    {

        [System.Text.Json.Serialization.JsonPropertyName("view")]
        public View5? View { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("change")]
        public Change5? Change { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Set_permissions6
    {

        [System.Text.Json.Serialization.JsonPropertyName("view")]
        public View6? View { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("change")]
        public Change6? Change { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Set_permissions7
    {

        [System.Text.Json.Serialization.JsonPropertyName("view")]
        public View7? View { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("change")]
        public Change7? Change { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Set_permissions8
    {

        [System.Text.Json.Serialization.JsonPropertyName("view")]
        public View8? View { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("change")]
        public Change8? Change { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Set_permissions9
    {

        [System.Text.Json.Serialization.JsonPropertyName("view")]
        public View9? View { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("change")]
        public Change9? Change { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Set_permissions10
    {

        [System.Text.Json.Serialization.JsonPropertyName("view")]
        public View10? View { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("change")]
        public Change10? Change { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int Id { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body2
    {

        [System.Text.Json.Serialization.JsonPropertyName("secret")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Secret { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Set_permissions11
    {

        [System.Text.Json.Serialization.JsonPropertyName("view")]
        public View11? View { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("change")]
        public Change11? Change { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Set_permissions12
    {

        [System.Text.Json.Serialization.JsonPropertyName("view")]
        public View12? View { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("change")]
        public Change12? Change { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Set_permissions13
    {

        [System.Text.Json.Serialization.JsonPropertyName("view")]
        public View13? View { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("change")]
        public Change13? Change { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Set_permissions14
    {

        [System.Text.Json.Serialization.JsonPropertyName("view")]
        public View14? View { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("change")]
        public Change14? Change { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Aufgabenstatus
    {

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"FAILURE")]
        FAILURE = 0,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"PENDING")]
        PENDING = 1,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"RECEIVED")]
        RECEIVED = 2,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"RETRY")]
        RETRY = 3,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"REVOKED")]
        REVOKED = 4,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"STARTED")]
        STARTED = 5,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"SUCCESS")]
        SUCCESS = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Aufgabenname
    {

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"check_sanity")]
        Check_sanity = 0,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"consume_file")]
        Consume_file = 1,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"index_optimize")]
        Index_optimize = 2,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"train_classifier")]
        Train_classifier = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Aufgabentyp
    {

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"auto_task")]
        Auto_task = 0,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"manual_task")]
        Manual_task = 1,

        [System.Text.Json.Serialization.JsonStringEnumMemberName(@"scheduled_task")]
        Scheduled_task = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body3
    {

        [System.Text.Json.Serialization.JsonPropertyName("tasks")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<int> Tasks { get; set; } = new System.Collections.ObjectModel.Collection<int>();

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Anonymous
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public int? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("created")]
        public System.DateTimeOffset? Created { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("expiration")]
        public System.DateTimeOffset? Expiration { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("slug")]
        public string? Slug { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Permissions
    {

        [System.Text.Json.Serialization.JsonPropertyName("view")]
        public View15? View { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("change")]
        public Change15? Change { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Permissions2
    {

        [System.Text.Json.Serialization.JsonPropertyName("view")]
        public View16? View { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("change")]
        public Change16? Change { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Permissions3
    {

        [System.Text.Json.Serialization.JsonPropertyName("view")]
        public View17? View { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("change")]
        public Change17? Change { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class View
    {

        [System.Text.Json.Serialization.JsonPropertyName("users")]
        public System.Collections.Generic.ICollection<int>? Users { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("groups")]
        public System.Collections.Generic.ICollection<int>? Groups { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Change
    {

        [System.Text.Json.Serialization.JsonPropertyName("users")]
        public System.Collections.Generic.ICollection<int>? Users { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("groups")]
        public System.Collections.Generic.ICollection<int>? Groups { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class View2
    {

        [System.Text.Json.Serialization.JsonPropertyName("users")]
        public System.Collections.Generic.ICollection<int>? Users { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("groups")]
        public System.Collections.Generic.ICollection<int>? Groups { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Change2
    {

        [System.Text.Json.Serialization.JsonPropertyName("users")]
        public System.Collections.Generic.ICollection<int>? Users { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("groups")]
        public System.Collections.Generic.ICollection<int>? Groups { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class View3
    {

        [System.Text.Json.Serialization.JsonPropertyName("users")]
        public System.Collections.Generic.ICollection<int>? Users { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("groups")]
        public System.Collections.Generic.ICollection<int>? Groups { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Change3
    {

        [System.Text.Json.Serialization.JsonPropertyName("users")]
        public System.Collections.Generic.ICollection<int>? Users { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("groups")]
        public System.Collections.Generic.ICollection<int>? Groups { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class View4
    {

        [System.Text.Json.Serialization.JsonPropertyName("users")]
        public System.Collections.Generic.ICollection<int>? Users { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("groups")]
        public System.Collections.Generic.ICollection<int>? Groups { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Change4
    {

        [System.Text.Json.Serialization.JsonPropertyName("users")]
        public System.Collections.Generic.ICollection<int>? Users { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("groups")]
        public System.Collections.Generic.ICollection<int>? Groups { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class View5
    {

        [System.Text.Json.Serialization.JsonPropertyName("users")]
        public System.Collections.Generic.ICollection<int>? Users { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("groups")]
        public System.Collections.Generic.ICollection<int>? Groups { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Change5
    {

        [System.Text.Json.Serialization.JsonPropertyName("users")]
        public System.Collections.Generic.ICollection<int>? Users { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("groups")]
        public System.Collections.Generic.ICollection<int>? Groups { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class View6
    {

        [System.Text.Json.Serialization.JsonPropertyName("users")]
        public System.Collections.Generic.ICollection<int>? Users { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("groups")]
        public System.Collections.Generic.ICollection<int>? Groups { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Change6
    {

        [System.Text.Json.Serialization.JsonPropertyName("users")]
        public System.Collections.Generic.ICollection<int>? Users { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("groups")]
        public System.Collections.Generic.ICollection<int>? Groups { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class View7
    {

        [System.Text.Json.Serialization.JsonPropertyName("users")]
        public System.Collections.Generic.ICollection<int>? Users { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("groups")]
        public System.Collections.Generic.ICollection<int>? Groups { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Change7
    {

        [System.Text.Json.Serialization.JsonPropertyName("users")]
        public System.Collections.Generic.ICollection<int>? Users { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("groups")]
        public System.Collections.Generic.ICollection<int>? Groups { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class View8
    {

        [System.Text.Json.Serialization.JsonPropertyName("users")]
        public System.Collections.Generic.ICollection<int>? Users { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("groups")]
        public System.Collections.Generic.ICollection<int>? Groups { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Change8
    {

        [System.Text.Json.Serialization.JsonPropertyName("users")]
        public System.Collections.Generic.ICollection<int>? Users { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("groups")]
        public System.Collections.Generic.ICollection<int>? Groups { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class View9
    {

        [System.Text.Json.Serialization.JsonPropertyName("users")]
        public System.Collections.Generic.ICollection<int>? Users { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("groups")]
        public System.Collections.Generic.ICollection<int>? Groups { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Change9
    {

        [System.Text.Json.Serialization.JsonPropertyName("users")]
        public System.Collections.Generic.ICollection<int>? Users { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("groups")]
        public System.Collections.Generic.ICollection<int>? Groups { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class View10
    {

        [System.Text.Json.Serialization.JsonPropertyName("users")]
        public System.Collections.Generic.ICollection<int>? Users { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("groups")]
        public System.Collections.Generic.ICollection<int>? Groups { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Change10
    {

        [System.Text.Json.Serialization.JsonPropertyName("users")]
        public System.Collections.Generic.ICollection<int>? Users { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("groups")]
        public System.Collections.Generic.ICollection<int>? Groups { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class View11
    {

        [System.Text.Json.Serialization.JsonPropertyName("users")]
        public System.Collections.Generic.ICollection<int>? Users { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("groups")]
        public System.Collections.Generic.ICollection<int>? Groups { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Change11
    {

        [System.Text.Json.Serialization.JsonPropertyName("users")]
        public System.Collections.Generic.ICollection<int>? Users { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("groups")]
        public System.Collections.Generic.ICollection<int>? Groups { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class View12
    {

        [System.Text.Json.Serialization.JsonPropertyName("users")]
        public System.Collections.Generic.ICollection<int>? Users { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("groups")]
        public System.Collections.Generic.ICollection<int>? Groups { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Change12
    {

        [System.Text.Json.Serialization.JsonPropertyName("users")]
        public System.Collections.Generic.ICollection<int>? Users { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("groups")]
        public System.Collections.Generic.ICollection<int>? Groups { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class View13
    {

        [System.Text.Json.Serialization.JsonPropertyName("users")]
        public System.Collections.Generic.ICollection<int>? Users { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("groups")]
        public System.Collections.Generic.ICollection<int>? Groups { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Change13
    {

        [System.Text.Json.Serialization.JsonPropertyName("users")]
        public System.Collections.Generic.ICollection<int>? Users { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("groups")]
        public System.Collections.Generic.ICollection<int>? Groups { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class View14
    {

        [System.Text.Json.Serialization.JsonPropertyName("users")]
        public System.Collections.Generic.ICollection<int>? Users { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("groups")]
        public System.Collections.Generic.ICollection<int>? Groups { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Change14
    {

        [System.Text.Json.Serialization.JsonPropertyName("users")]
        public System.Collections.Generic.ICollection<int>? Users { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("groups")]
        public System.Collections.Generic.ICollection<int>? Groups { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class View15
    {

        [System.Text.Json.Serialization.JsonPropertyName("users")]
        public System.Collections.Generic.ICollection<int>? Users { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("groups")]
        public System.Collections.Generic.ICollection<int>? Groups { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Change15
    {

        [System.Text.Json.Serialization.JsonPropertyName("users")]
        public System.Collections.Generic.ICollection<int>? Users { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("groups")]
        public System.Collections.Generic.ICollection<int>? Groups { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class View16
    {

        [System.Text.Json.Serialization.JsonPropertyName("users")]
        public System.Collections.Generic.ICollection<int>? Users { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("groups")]
        public System.Collections.Generic.ICollection<int>? Groups { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Change16
    {

        [System.Text.Json.Serialization.JsonPropertyName("users")]
        public System.Collections.Generic.ICollection<int>? Users { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("groups")]
        public System.Collections.Generic.ICollection<int>? Groups { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class View17
    {

        [System.Text.Json.Serialization.JsonPropertyName("users")]
        public System.Collections.Generic.ICollection<int>? Users { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("groups")]
        public System.Collections.Generic.ICollection<int>? Groups { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Change17
    {

        [System.Text.Json.Serialization.JsonPropertyName("users")]
        public System.Collections.Generic.ICollection<int>? Users { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("groups")]
        public System.Collections.Generic.ICollection<int>? Groups { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class DateFormatConverter : System.Text.Json.Serialization.JsonConverter<System.DateTimeOffset>
    {
        public override System.DateTimeOffset Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
        {
            var dateTime = reader.GetString();
            if (dateTime == null)
            {
                throw new System.Text.Json.JsonException("Unexpected JsonTokenType.Null");
            }

            return System.DateTimeOffset.Parse(dateTime);
        }

        public override void Write(System.Text.Json.Utf8JsonWriter writer, System.DateTimeOffset value, System.Text.Json.JsonSerializerOptions options)
        {
            writer.WriteStringValue(value.ToString("yyyy-MM-dd"));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileParameter
    {
        public FileParameter(System.IO.Stream data)
            : this (data, null, null)
        {
        }

        public FileParameter(System.IO.Stream data, string? fileName)
            : this (data, fileName, null)
        {
        }

        public FileParameter(System.IO.Stream data, string? fileName, string? contentType)
        {
            Data = data;
            FileName = fileName;
            ContentType = contentType;
        }

        public System.IO.Stream Data { get; private set; }

        public string? FileName { get; private set; }

        public string? ContentType { get; private set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable? _client;
        private System.IDisposable? _response;

        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable? client, System.IDisposable? response)
        {
            StatusCode = statusCode;
            Headers = headers;
            Stream = stream;
            _client = client;
            _response = response;
        }

        public void Dispose()
        {
            Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }


    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string? Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception? innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.6.1.0 (NJsonSchema v11.5.1.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception? innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore  649
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8600
#pragma warning restore 8602
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625
#pragma warning restore 8765